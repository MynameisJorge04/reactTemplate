{"ast":null,"code":"var _jsxFileName = \"/home/jorgebg/personalProjects/cursoReact/cursoReactIntroduccion/todo-machine/src/App.js\",\n  _s = $RefreshSig$();\n//pedimos a react que nos haga un paquete invisible\n//LLamamos a nuestro archivo todocounter traer la funcion no el archivo\nimport React from 'react';\nimport { TodoCounter } from './TodoCounter';\nimport { TodoItem } from './TodoItem';\nimport { TodoSearch } from './TodoSearch';\nimport { TodoList } from './TodoList';\nimport { CreateTodoButton } from './CreateTodoButton';\nimport { TodoHeader } from './TodoHeader';\nimport './App.css';\n\n//Ejemplo: tenemos una url \n//const url = \"https://.jpg\" podemos remplazar con el nombre de la variable\n\n//Esto se traduce a una clase en un div, que solo son llamados a react\n//Podemos obtener parametros de elementos desde nuestro index.js observamos que hay buenos\n//mensajes existentes\n\n//Lista falsa de todos\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defultTodos = [{\n  text: 'Cortar cebolla',\n  completed: true\n}, {\n  text: 'Tomar curso intro react',\n  completed: false\n}, {\n  text: 'Llorar con la lloran',\n  completed: false\n}, {\n  text: 'LALALALLALALAA',\n  completed: false\n}];\nfunction App() {\n  _s();\n  const [todos, setTodos] = React.useState(defultTodos);\n  //Creamos nuestros estados a traves de nuestro searchValue y esto hace que haya una posuble reutilizacion de los componentes esto nos ayudara al cambio de estado dinamico\n  const [searchValue, setSearchValue] = React.useState('');\n\n  //CUantos todos hemos completado, a traves de nuestro todo viendo la propiedad interesante la forma de validacion con doble signo de admiiracion\n  const completedTodos = todos.filter(todo => !!todo.completed).length;\n  const totalTodos = todos.length; //Total de todos\n\n  //Buscar si no han escrito nada en un arreglo con el input\n  let searchedTodos = [];\n  //Vemos si search es mayor que 1 para ver si no han escrito se muetsrasn igual\n  if (!searchValue.length >= 1) {\n    searchedTodos = todos;\n  }\n  return (\n    /*#__PURE__*/\n    //Soporta un componente solamente\n    //Esta etiqueta nos funciona para calculos internos solo enviamos una etiqueta por componente envolver para quitar cantidad divs\n    //Para comentar o poner javascript con las {} claves\n    _jsxDEV(React.Fragment, {\n      children: [\n      /*#__PURE__*/\n      //Para evitar confusiones no se debe dar class si no que se da con class name evitar clases de js\n      //La magia de JSX es las propiedades que hay\n      _jsxDEV(TodoHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 5\n      }, this)\n      //Poner nuestros elementos\n      //Todocounter es el que marcara el numero de todos completados\n      , /*#__PURE__*/_jsxDEV(TodoCounter, {\n        total: totalTodos,\n        completed: completedTodos\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(TodoSearch, {\n        searchValue: searchValue,\n        setSearchValue: setSearchValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(TodoList, {\n        children: todos.map(todo =>\n        /*#__PURE__*/\n        //Tomemos en cuenta que hay que tener un identificador de lista asi como un ID en abse de datos\n        _jsxDEV(TodoItem, {\n          text: todo.text\n          //Enviamos una nueva propiedad que se llame completed\n          ,\n          completed: todo.completed\n        }, todo.text, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(CreateTodoButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n//Encapsulamiento javascript\n_s(App, \"MF1AhHaQimgyhm/2VExrZ3MjRDY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","TodoCounter","TodoItem","TodoSearch","TodoList","CreateTodoButton","TodoHeader","defultTodos","text","completed","App","todos","setTodos","useState","searchValue","setSearchValue","completedTodos","filter","todo","length","totalTodos","searchedTodos","map"],"sources":["/home/jorgebg/personalProjects/cursoReact/cursoReactIntroduccion/todo-machine/src/App.js"],"sourcesContent":["//pedimos a react que nos haga un paquete invisible\n//LLamamos a nuestro archivo todocounter traer la funcion no el archivo\nimport React from 'react';\nimport { TodoCounter } from './TodoCounter';\nimport { TodoItem } from './TodoItem';\nimport { TodoSearch } from './TodoSearch';\nimport { TodoList } from './TodoList';\nimport { CreateTodoButton } from './CreateTodoButton';\nimport { TodoHeader } from './TodoHeader';\nimport './App.css';\n\n//Ejemplo: tenemos una url \n//const url = \"https://.jpg\" podemos remplazar con el nombre de la variable\n\n//Esto se traduce a una clase en un div, que solo son llamados a react\n//Podemos obtener parametros de elementos desde nuestro index.js observamos que hay buenos\n//mensajes existentes\n\n//Lista falsa de todos\n\nconst defultTodos = [\n  {text: 'Cortar cebolla', completed: true},\n  {text: 'Tomar curso intro react', completed: false},\n  {text: 'Llorar con la lloran', completed: false},\n  {text: 'LALALALLALALAA', completed: false},\n];\n\nfunction App() {\n\n  const [todos, setTodos] = React.useState(defultTodos);\n  //Creamos nuestros estados a traves de nuestro searchValue y esto hace que haya una posuble reutilizacion de los componentes esto nos ayudara al cambio de estado dinamico\n  const [searchValue, setSearchValue] = React.useState('');\n\n  //CUantos todos hemos completado, a traves de nuestro todo viendo la propiedad interesante la forma de validacion con doble signo de admiiracion\n  const completedTodos = todos.filter(todo => !!todo.completed).length;\n  const totalTodos = todos.length; //Total de todos\n\n  //Buscar si no han escrito nada en un arreglo con el input\n  let searchedTodos = [];\n  //Vemos si search es mayor que 1 para ver si no han escrito se muetsrasn igual\n  if(!searchValue.length >= 1){\n    searchedTodos = todos;\n  }\n\n  return (\n    //Soporta un componente solamente\n    //Esta etiqueta nos funciona para calculos internos solo enviamos una etiqueta por componente envolver para quitar cantidad divs\n    //Para comentar o poner javascript con las {} claves\n    <React.Fragment>\n    {//Para evitar confusiones no se debe dar class si no que se da con class name evitar clases de js\n    //La magia de JSX es las propiedades que hay\n    <TodoHeader/>\n    //Poner nuestros elementos\n    //Todocounter es el que marcara el numero de todos completados\n    }\n    <TodoCounter\n    total={totalTodos}\n    completed={completedTodos}\n    />\n\n    {//El input de busqueda que escribamos\n     //podemos crear a traves de react nuestra app principal los valores de estados de nuestra app\n    }\n    <TodoSearch\n      searchValue={searchValue}\n      setSearchValue={setSearchValue}\n    />\n    \n      \n    {//COntenedor de todos con lista\n    //Tenemos nuestro componente que sera el recursivo reutilizable, utilizando map rendrizando\n    }\n    <TodoList>\n      \n    {todos.map(todo => (\n          //Tomemos en cuenta que hay que tener un identificador de lista asi como un ID en abse de datos\n          <TodoItem \n          key={todo.text} \n          text={todo.text}\n          //Enviamos una nueva propiedad que se llame completed\n          completed={todo.completed}\n          />\n     ))}\n      \n    </TodoList>\n\n    <CreateTodoButton/>\n    </React.Fragment>\n    );\n\n    \n}\n\n//Encapsulamiento javascript\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,QAAQ,QAAQ,YAAY;AACrC,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,QAAQ,QAAQ,YAAY;AACrC,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,UAAU,QAAQ,cAAc;AACzC,OAAO,WAAW;;AAElB;AACA;;AAEA;AACA;AACA;;AAEA;AAAA;AAEA,MAAMC,WAAW,GAAG,CAClB;EAACC,IAAI,EAAE,gBAAgB;EAAEC,SAAS,EAAE;AAAI,CAAC,EACzC;EAACD,IAAI,EAAE,yBAAyB;EAAEC,SAAS,EAAE;AAAK,CAAC,EACnD;EAACD,IAAI,EAAE,sBAAsB;EAAEC,SAAS,EAAE;AAAK,CAAC,EAChD;EAACD,IAAI,EAAE,gBAAgB;EAAEC,SAAS,EAAE;AAAK,CAAC,CAC3C;AAED,SAASC,GAAG,GAAG;EAAA;EAEb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,KAAK,CAACa,QAAQ,CAACN,WAAW,CAAC;EACrD;EACA,MAAM,CAACO,WAAW,EAAEC,cAAc,CAAC,GAAGf,KAAK,CAACa,QAAQ,CAAC,EAAE,CAAC;;EAExD;EACA,MAAMG,cAAc,GAAGL,KAAK,CAACM,MAAM,CAACC,IAAI,IAAI,CAAC,CAACA,IAAI,CAACT,SAAS,CAAC,CAACU,MAAM;EACpE,MAAMC,UAAU,GAAGT,KAAK,CAACQ,MAAM,CAAC,CAAC;;EAEjC;EACA,IAAIE,aAAa,GAAG,EAAE;EACtB;EACA,IAAG,CAACP,WAAW,CAACK,MAAM,IAAI,CAAC,EAAC;IAC1BE,aAAa,GAAGV,KAAK;EACvB;EAEA;IAAA;IACE;IACA;IACA;IACA,QAAC,KAAK,CAAC,QAAQ;MAAA;MAAA;MACd;MACD;MACA,QAAC,UAAU;QAAA;QAAA;QAAA;MAAA;MACX;MACA;MAAA,eAEA,QAAC,WAAW;QACZ,KAAK,EAAES,UAAW;QAClB,SAAS,EAAEJ;MAAe;QAAA;QAAA;QAAA;MAAA,QACxB,eAKF,QAAC,UAAU;QACT,WAAW,EAAEF,WAAY;QACzB,cAAc,EAAEC;MAAe;QAAA;QAAA;QAAA;MAAA,QAC/B,eAMF,QAAC,QAAQ;QAAA,UAERJ,KAAK,CAACW,GAAG,CAACJ,IAAI;QAAA;QACT;QACA,QAAC,QAAQ;UAET,IAAI,EAAEA,IAAI,CAACV;UACX;UAAA;UACA,SAAS,EAAEU,IAAI,CAACT;QAAU,GAHrBS,IAAI,CAACV,IAAI;UAAA;UAAA;UAAA;QAAA,QAKlB;MAAC;QAAA;QAAA;QAAA;MAAA,QAEQ,eAEX,QAAC,gBAAgB;QAAA;QAAA;QAAA;MAAA,QAAE;IAAA;MAAA;MAAA;MAAA;IAAA;EACF;AAIrB;;AAEA;AAAA,GAlESE,GAAG;AAAA,KAAHA,GAAG;AAmEZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}