{"ast":null,"code":"var _jsxFileName = \"/home/jorgebg/personalProjects/cursoReact/cursoReactIntroduccion/todo-machine/src/App/AppUI.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { TodoContext } from '../TodoContext';\nimport { TodoCounter } from '../TodoCounter';\nimport { TodoSearch } from '../TodoSearch';\nimport { TodoList } from '../TodoList';\nimport { TodoItem } from '../TodoItem';\nimport { CreateTodoButton } from '../CreateTodoButton';\nimport { Modal } from '../Modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AppUI() {\n  _s();\n  var _searchedTodos$;\n  const {\n    error,\n    loading,\n    searchedTodos,\n    completeTodo,\n    deleteTodo,\n    openModal,\n    setOpenModal\n  } = React.useContext(TodoContext);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TodoCounter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodoSearch, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodoList, {\n      children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Desesp\\xE9rate, hubo un error...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 19\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Estamos cargando, no desesperes...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 21\n      }, this), !loading && !searchedTodos.length && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\xA1Crea tu primer TODO!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 49\n      }, this), searchedTodos.map(todo => /*#__PURE__*/_jsxDEV(TodoItem, {\n        text: todo.text,\n        completed: todo.completed,\n        onComplete: () => completeTodo(todo.text),\n        onDelete: () => deleteTodo(todo.text)\n      }, todo.text, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), !!openModal && /*#__PURE__*/_jsxDEV(Modal, {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: (_searchedTodos$ = searchedTodos[0]) === null || _searchedTodos$ === void 0 ? void 0 : _searchedTodos$.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CreateTodoButton, {\n      setOpenModal: setOpenModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n_s(AppUI, \"rs8X1J1GPTuG9v9tpIblLE8Lo1c=\");\n_c = AppUI;\nexport { AppUI };\n\n// import React from \"react\";\n// import { TodoContext } from \"../TodoContext\";\n// import { TodoCounter } from \"../TodoCounter\";\n// import { TodoItem } from \"../TodoItem\";\n// import { TodoForm } from \"../TodoForm\";\n// import { TodoSearch } from \"../TodoSearch\";\n// import { TodoList } from \"../TodoList\";\n// import { CreateTodoButton } from \"../CreateTodoButton\";\n// import { TodoHeader } from \"../TodoHeader\";\n// import { Modal } from \"../Modal\";\n\n// //Podemos tener un envolvimiento de propos con reactcontext\n\n// function AppUI() {\n//   // El hook de contexto nos ayuda a acceder a datos globales de nuestro  contexto, desde cualquier componente hijo, sin tener que pasar estos datos por props componente por componente.\n//   const {\n//     error,\n//     loading,\n//     searchedTodos,\n//     completeTodos,\n//     deleteTodos,\n//     openModal,\n//     setOpenModal,\n//   } = React.useContext(TodoContext);\n\n//   return (\n//     //Soporta un componente solamente\n//     //Esta etiqueta nos funciona para calculos internos solo enviamos una etiqueta por componente envolver para quitar cantidad divs\n//     //Para comentar o poner javascript con las {} claves\n//     <React.Fragment>\n//       {\n//         //Para evitar confusiones no se debe dar class si no que se da con class name evitar clases de js\n//         //La magia de JSX es las propiedades que hay\n//         <TodoHeader />\n//         //Poner nuestros elementos\n//         //Todocounter es el que marcara el numero de todos completados\n//       }\n//       <TodoCounter />\n\n//       {\n//         //El input de busqueda que escribamos\n//         //podemos crear a traves de react nuestra app principal los valores de estados de nuestra app\n//       }\n//       <TodoSearch />\n\n//       {\n//         //COntenedor de todos con lista\n//         //Tenemos nuestro componente que sera el recursivo reutilizable, utilizando map rendrizando\n//         //Podemos ocupar Consumer vamos a enviar funcion con renders\n//       }\n\n//       {/* Podemos observar que tenemos nuestros valores podemos para enviar esto sin necesidad de tener componentes */}\n//       <TodoList>\n//         {\n//           //Controlamos de esta manera si hay un estado de error etc\n//           error && <p>Desesperate, hubo un error...</p>\n//         }\n//         {loading && <p>Estamos cargando, no desesperes...</p>}\n\n//         {\n//           //Esto se comprende como el manejo de efectos dependeiendo del numero total se desprende un texto etc\n//           !loading && !searchedTodos.length && <p>Crea tu primer todo</p>\n//         }\n\n//         {searchedTodos.map((todo) => (\n//           //Tomemos en cuenta que hay que tener un identificador de lista asi como un ID en abse de datos\n//           <TodoItem\n//             key={todo.text}\n//             text={todo.text}\n//             //Enviamos una nueva propiedad que se llame completed\n//             completed={todo.completed}\n//             //Enviamos las propiedas a nuestro componente para la actualizacion y re-renderizacion de todos\n//             onComplete={() => completeTodos(todo.text)}\n//             onDelete={() => deleteTodos(todo.text)}\n//           />\n//         ))}\n//       </TodoList>\n//       {/* Recuerda que la doble negacion significa que es igual a true hacemos validacion para enseñar el componente teletransportado */}\n\n//       {!!openModal && (\n//         <Modal>\n//           <TodoForm />\n//         </Modal>\n//       )}\n\n//       <CreateTodoButton setOpenModal={setOpenModal} />\n//     </React.Fragment>\n//   );\n// }\n\n// export { AppUI };\nvar _c;\n$RefreshReg$(_c, \"AppUI\");","map":{"version":3,"names":["React","TodoContext","TodoCounter","TodoSearch","TodoList","TodoItem","CreateTodoButton","Modal","AppUI","error","loading","searchedTodos","completeTodo","deleteTodo","openModal","setOpenModal","useContext","length","map","todo","text","completed"],"sources":["/home/jorgebg/personalProjects/cursoReact/cursoReactIntroduccion/todo-machine/src/App/AppUI.js"],"sourcesContent":["import React from 'react';\nimport { TodoContext } from '../TodoContext';\nimport { TodoCounter } from '../TodoCounter';\nimport { TodoSearch } from '../TodoSearch';\nimport { TodoList } from '../TodoList';\nimport { TodoItem } from '../TodoItem';\nimport { CreateTodoButton } from '../CreateTodoButton';\nimport { Modal } from '../Modal';\n\nfunction AppUI() {\n  const {\n    error,\n    loading,\n    searchedTodos,\n    completeTodo,\n    deleteTodo,\n    openModal,\n    setOpenModal,\n  } = React.useContext(TodoContext);\n  \n  return (\n    <React.Fragment>\n      <TodoCounter />\n      <TodoSearch />\n\n      <TodoList>\n        {error && <p>Desespérate, hubo un error...</p>}\n        {loading && <p>Estamos cargando, no desesperes...</p>}\n        {(!loading && !searchedTodos.length) && <p>¡Crea tu primer TODO!</p>}\n        \n        {searchedTodos.map(todo => (\n          <TodoItem\n            key={todo.text}\n            text={todo.text}\n            completed={todo.completed}\n            onComplete={() => completeTodo(todo.text)}\n            onDelete={() => deleteTodo(todo.text)}\n          />\n        ))}\n      </TodoList>\n\n      {!!openModal && (\n        <Modal>\n          <p>{searchedTodos[0]?.text}</p>\n        </Modal>\n      )}\n\n      <CreateTodoButton\n        setOpenModal={setOpenModal}\n      />\n    </React.Fragment>\n  );\n}\n\nexport { AppUI };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React from \"react\";\n// import { TodoContext } from \"../TodoContext\";\n// import { TodoCounter } from \"../TodoCounter\";\n// import { TodoItem } from \"../TodoItem\";\n// import { TodoForm } from \"../TodoForm\";\n// import { TodoSearch } from \"../TodoSearch\";\n// import { TodoList } from \"../TodoList\";\n// import { CreateTodoButton } from \"../CreateTodoButton\";\n// import { TodoHeader } from \"../TodoHeader\";\n// import { Modal } from \"../Modal\";\n\n\n// //Podemos tener un envolvimiento de propos con reactcontext\n\n// function AppUI() {\n//   // El hook de contexto nos ayuda a acceder a datos globales de nuestro  contexto, desde cualquier componente hijo, sin tener que pasar estos datos por props componente por componente.\n//   const {\n//     error,\n//     loading,\n//     searchedTodos,\n//     completeTodos,\n//     deleteTodos,\n//     openModal,\n//     setOpenModal,\n//   } = React.useContext(TodoContext);\n\n//   return (\n//     //Soporta un componente solamente\n//     //Esta etiqueta nos funciona para calculos internos solo enviamos una etiqueta por componente envolver para quitar cantidad divs\n//     //Para comentar o poner javascript con las {} claves\n//     <React.Fragment>\n//       {\n//         //Para evitar confusiones no se debe dar class si no que se da con class name evitar clases de js\n//         //La magia de JSX es las propiedades que hay\n//         <TodoHeader />\n//         //Poner nuestros elementos\n//         //Todocounter es el que marcara el numero de todos completados\n//       }\n//       <TodoCounter />\n\n//       {\n//         //El input de busqueda que escribamos\n//         //podemos crear a traves de react nuestra app principal los valores de estados de nuestra app\n//       }\n//       <TodoSearch />\n\n//       {\n//         //COntenedor de todos con lista\n//         //Tenemos nuestro componente que sera el recursivo reutilizable, utilizando map rendrizando\n//         //Podemos ocupar Consumer vamos a enviar funcion con renders\n//       }\n\n//       {/* Podemos observar que tenemos nuestros valores podemos para enviar esto sin necesidad de tener componentes */}\n//       <TodoList>\n//         {\n//           //Controlamos de esta manera si hay un estado de error etc\n//           error && <p>Desesperate, hubo un error...</p>\n//         }\n//         {loading && <p>Estamos cargando, no desesperes...</p>}\n\n//         {\n//           //Esto se comprende como el manejo de efectos dependeiendo del numero total se desprende un texto etc\n//           !loading && !searchedTodos.length && <p>Crea tu primer todo</p>\n//         }\n\n//         {searchedTodos.map((todo) => (\n//           //Tomemos en cuenta que hay que tener un identificador de lista asi como un ID en abse de datos\n//           <TodoItem\n//             key={todo.text}\n//             text={todo.text}\n//             //Enviamos una nueva propiedad que se llame completed\n//             completed={todo.completed}\n//             //Enviamos las propiedas a nuestro componente para la actualizacion y re-renderizacion de todos\n//             onComplete={() => completeTodos(todo.text)}\n//             onDelete={() => deleteTodos(todo.text)}\n//           />\n//         ))}\n//       </TodoList>\n//       {/* Recuerda que la doble negacion significa que es igual a true hacemos validacion para enseñar el componente teletransportado */}\n\n//       {!!openModal && (\n//         <Modal>\n//           <TodoForm />\n//         </Modal>\n//       )}\n\n//       <CreateTodoButton setOpenModal={setOpenModal} />\n//     </React.Fragment>\n//   );\n// }\n\n// export { AppUI };\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,gBAAgB,QAAQ,qBAAqB;AACtD,SAASC,KAAK,QAAQ,UAAU;AAAC;AAEjC,SAASC,KAAK,GAAG;EAAA;EAAA;EACf,MAAM;IACJC,KAAK;IACLC,OAAO;IACPC,aAAa;IACbC,YAAY;IACZC,UAAU;IACVC,SAAS;IACTC;EACF,CAAC,GAAGf,KAAK,CAACgB,UAAU,CAACf,WAAW,CAAC;EAEjC,oBACE,QAAC,KAAK,CAAC,QAAQ;IAAA,wBACb,QAAC,WAAW;MAAA;MAAA;MAAA;IAAA,QAAG,eACf,QAAC,UAAU;MAAA;MAAA;MAAA;IAAA,QAAG,eAEd,QAAC,QAAQ;MAAA,WACNQ,KAAK,iBAAI;QAAA,UAAG;MAA6B;QAAA;QAAA;QAAA;MAAA,QAAI,EAC7CC,OAAO,iBAAI;QAAA,UAAG;MAAkC;QAAA;QAAA;QAAA;MAAA,QAAI,EACnD,CAACA,OAAO,IAAI,CAACC,aAAa,CAACM,MAAM,iBAAK;QAAA,UAAG;MAAqB;QAAA;QAAA;QAAA;MAAA,QAAI,EAEnEN,aAAa,CAACO,GAAG,CAACC,IAAI,iBACrB,QAAC,QAAQ;QAEP,IAAI,EAAEA,IAAI,CAACC,IAAK;QAChB,SAAS,EAAED,IAAI,CAACE,SAAU;QAC1B,UAAU,EAAE,MAAMT,YAAY,CAACO,IAAI,CAACC,IAAI,CAAE;QAC1C,QAAQ,EAAE,MAAMP,UAAU,CAACM,IAAI,CAACC,IAAI;MAAE,GAJjCD,IAAI,CAACC,IAAI;QAAA;QAAA;QAAA;MAAA,QAMjB,CAAC;IAAA;MAAA;MAAA;MAAA;IAAA,QACO,EAEV,CAAC,CAACN,SAAS,iBACV,QAAC,KAAK;MAAA,uBACJ;QAAA,6BAAIH,aAAa,CAAC,CAAC,CAAC,oDAAhB,gBAAkBS;MAAI;QAAA;QAAA;QAAA;MAAA;IAAK;MAAA;MAAA;MAAA;IAAA,QAElC,eAED,QAAC,gBAAgB;MACf,YAAY,EAAEL;IAAa;MAAA;MAAA;MAAA;IAAA,QAC3B;EAAA;IAAA;IAAA;IAAA;EAAA,QACa;AAErB;AAAC,GA3CQP,KAAK;AAAA,KAALA,KAAK;AA6Cd,SAASA,KAAK;;AA6Bd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}