{"ast":null,"code":"var _jsxFileName = \"/home/jorgebg/personalProjects/cursoReact/cursoReactIntroduccion/todo-machine/src/App/AppUI.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { TodoContext } from \"../TodoContext\";\nimport { TodoCounter } from \"../TodoCounter\";\nimport { TodoItem } from \"../TodoItem\";\nimport { TodoForm } from \"../TodoForm\";\nimport { TodoSearch } from \"../TodoSearch\";\nimport { TodoList } from \"../TodoList\";\nimport { CreateTodoButton } from \"../CreateTodoButton\";\nimport { TodoHeader } from \"../TodoHeader\";\nimport { Modal } from \"../Modal\";\n\n//Podemos tener un envolvimiento de propos con reactcontext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AppUI() {\n  _s();\n  // El hook de contexto nos ayuda a acceder a datos globales de nuestro  contexto, desde cualquier componente hijo, sin tener que pasar estos datos por props componente por componente.\n  const {\n    error,\n    loading,\n    searchedTodos,\n    completeTodos,\n    deleteTodos,\n    openModal,\n    setOpenModal\n  } = React.useContext(TodoContext);\n  return (\n    /*#__PURE__*/\n    //Soporta un componente solamente\n    //Esta etiqueta nos funciona para calculos internos solo enviamos una etiqueta por componente envolver para quitar cantidad divs\n    //Para comentar o poner javascript con las {} claves\n    _jsxDEV(React.Fragment, {\n      children: [\n      /*#__PURE__*/\n      //Para evitar confusiones no se debe dar class si no que se da con class name evitar clases de js\n      //La magia de JSX es las propiedades que hay\n      _jsxDEV(TodoHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n      //Poner nuestros elementos\n      //Todocounter es el que marcara el numero de todos completados\n      , /*#__PURE__*/_jsxDEV(TodoCounter, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(TodoSearch, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(TodoList, {\n        children: [\n        //Controlamos de esta manera si hay un estado de error etc\n        error && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Desesperate, hubo un error...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 20\n        }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Estamos cargando, no desesperes...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this),\n        //Esto se comprende como el manejo de efectos dependeiendo del numero total se desprende un texto etc\n        !loading && !searchedTodos.length && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Crea tu primer todo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 48\n        }, this), searchedTodos.map(todo =>\n        /*#__PURE__*/\n        //Tomemos en cuenta que hay que tener un identificador de lista asi como un ID en abse de datos\n        _jsxDEV(TodoItem, {\n          text: todo.text\n          //Enviamos una nueva propiedad que se llame completed\n          ,\n          completed: todo.completed\n          //Enviamos las propiedas a nuestro componente para la actualizacion y re-renderizacion de todos\n          ,\n          onComplete: () => completeTodos(todo.text),\n          onDelete: () => deleteTodos(todo.text)\n        }, todo.text, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }, this), !!openModal && /*#__PURE__*/_jsxDEV(Modal, {\n        children: /*#__PURE__*/_jsxDEV(TodoForm, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CreateTodoButton, {\n        setOpenModal: setOpenModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(AppUI, \"WtO4pTGV5lNSaqto/2TLXUUBTSA=\");\n_c = AppUI;\nexport { AppUI };\nvar _c;\n$RefreshReg$(_c, \"AppUI\");","map":{"version":3,"names":["React","TodoContext","TodoCounter","TodoItem","TodoForm","TodoSearch","TodoList","CreateTodoButton","TodoHeader","Modal","AppUI","error","loading","searchedTodos","completeTodos","deleteTodos","openModal","setOpenModal","useContext","length","map","todo","text","completed"],"sources":["/home/jorgebg/personalProjects/cursoReact/cursoReactIntroduccion/todo-machine/src/App/AppUI.js"],"sourcesContent":["import React from \"react\";\nimport { TodoContext } from \"../TodoContext\";\nimport { TodoCounter } from \"../TodoCounter\";\nimport { TodoItem } from \"../TodoItem\";\nimport { TodoForm } from \"../TodoForm\";\nimport { TodoSearch } from \"../TodoSearch\";\nimport { TodoList } from \"../TodoList\";\nimport { CreateTodoButton } from \"../CreateTodoButton\";\nimport { TodoHeader } from \"../TodoHeader\";\nimport { Modal } from \"../Modal\";\n\n\n//Podemos tener un envolvimiento de propos con reactcontext\n\nfunction AppUI() {\n  // El hook de contexto nos ayuda a acceder a datos globales de nuestro  contexto, desde cualquier componente hijo, sin tener que pasar estos datos por props componente por componente.\n  const {\n    error,\n    loading,\n    searchedTodos,\n    completeTodos,\n    deleteTodos,\n    openModal,\n    setOpenModal,\n  } = React.useContext(TodoContext);\n\n  return (\n    //Soporta un componente solamente\n    //Esta etiqueta nos funciona para calculos internos solo enviamos una etiqueta por componente envolver para quitar cantidad divs\n    //Para comentar o poner javascript con las {} claves\n    <React.Fragment>\n      {\n        //Para evitar confusiones no se debe dar class si no que se da con class name evitar clases de js\n        //La magia de JSX es las propiedades que hay\n        <TodoHeader />\n        //Poner nuestros elementos\n        //Todocounter es el que marcara el numero de todos completados\n      }\n      <TodoCounter />\n\n      {\n        //El input de busqueda que escribamos\n        //podemos crear a traves de react nuestra app principal los valores de estados de nuestra app\n      }\n      <TodoSearch />\n\n      {\n        //COntenedor de todos con lista\n        //Tenemos nuestro componente que sera el recursivo reutilizable, utilizando map rendrizando\n        //Podemos ocupar Consumer vamos a enviar funcion con renders\n      }\n\n      {/* Podemos observar que tenemos nuestros valores podemos para enviar esto sin necesidad de tener componentes */}\n      <TodoList>\n        {\n          //Controlamos de esta manera si hay un estado de error etc\n          error && <p>Desesperate, hubo un error...</p>\n        }\n        {loading && <p>Estamos cargando, no desesperes...</p>}\n\n        {\n          //Esto se comprende como el manejo de efectos dependeiendo del numero total se desprende un texto etc\n          !loading && !searchedTodos.length && <p>Crea tu primer todo</p>\n        }\n\n        {searchedTodos.map((todo) => (\n          //Tomemos en cuenta que hay que tener un identificador de lista asi como un ID en abse de datos\n          <TodoItem\n            key={todo.text}\n            text={todo.text}\n            //Enviamos una nueva propiedad que se llame completed\n            completed={todo.completed}\n            //Enviamos las propiedas a nuestro componente para la actualizacion y re-renderizacion de todos\n            onComplete={() => completeTodos(todo.text)}\n            onDelete={() => deleteTodos(todo.text)}\n          />\n        ))}\n      </TodoList>\n      {/* Recuerda que la doble negacion significa que es igual a true hacemos validacion para ense√±ar el componente teletransportado */}\n\n      {!!openModal && (\n        <Modal>\n          <TodoForm />\n        </Modal>\n      )}\n\n      <CreateTodoButton setOpenModal={setOpenModal} />\n    </React.Fragment>\n  );\n}\n\nexport { AppUI };\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,gBAAgB,QAAQ,qBAAqB;AACtD,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,KAAK,QAAQ,UAAU;;AAGhC;AAAA;AAEA,SAASC,KAAK,GAAG;EAAA;EACf;EACA,MAAM;IACJC,KAAK;IACLC,OAAO;IACPC,aAAa;IACbC,aAAa;IACbC,WAAW;IACXC,SAAS;IACTC;EACF,CAAC,GAAGjB,KAAK,CAACkB,UAAU,CAACjB,WAAW,CAAC;EAEjC;IAAA;IACE;IACA;IACA;IACA,QAAC,KAAK,CAAC,QAAQ;MAAA;MAAA;MAEX;MACA;MACA,QAAC,UAAU;QAAA;QAAA;QAAA;MAAA;MACX;MACA;MAAA,eAEF,QAAC,WAAW;QAAA;QAAA;QAAA;MAAA,QAAG,eAMf,QAAC,UAAU;QAAA;QAAA;QAAA;MAAA,QAAG,eASd,QAAC,QAAQ;QAAA;QAEL;QACAU,KAAK,iBAAI;UAAA,UAAG;QAA6B;UAAA;UAAA;UAAA;QAAA,QAAI,EAE9CC,OAAO,iBAAI;UAAA,UAAG;QAAkC;UAAA;UAAA;UAAA;QAAA,QAAI;QAGnD;QACA,CAACA,OAAO,IAAI,CAACC,aAAa,CAACM,MAAM,iBAAI;UAAA,UAAG;QAAmB;UAAA;UAAA;UAAA;QAAA,QAAI,EAGhEN,aAAa,CAACO,GAAG,CAAEC,IAAI;QAAA;QACtB;QACA,QAAC,QAAQ;UAEP,IAAI,EAAEA,IAAI,CAACC;UACX;UAAA;UACA,SAAS,EAAED,IAAI,CAACE;UAChB;UAAA;UACA,UAAU,EAAE,MAAMT,aAAa,CAACO,IAAI,CAACC,IAAI,CAAE;UAC3C,QAAQ,EAAE,MAAMP,WAAW,CAACM,IAAI,CAACC,IAAI;QAAE,GANlCD,IAAI,CAACC,IAAI;UAAA;UAAA;UAAA;QAAA,QAQjB,CAAC;MAAA;QAAA;QAAA;QAAA;MAAA,QACO,EAGV,CAAC,CAACN,SAAS,iBACV,QAAC,KAAK;QAAA,uBACJ,QAAC,QAAQ;UAAA;UAAA;UAAA;QAAA;MAAG;QAAA;QAAA;QAAA;MAAA,QAEf,eAED,QAAC,gBAAgB;QAAC,YAAY,EAAEC;MAAa;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA;EACjC;AAErB;AAAC,GA3EQP,KAAK;AAAA,KAALA,KAAK;AA6Ed,SAASA,KAAK;AAAG;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}