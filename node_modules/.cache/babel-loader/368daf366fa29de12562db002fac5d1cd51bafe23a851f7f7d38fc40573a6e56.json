{"ast":null,"code":"var _jsxFileName = \"/home/jorgebg/personalProjects/cursoReact/cursoReactIntroduccion/todo-machine/src/TodoContext/index.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useLocalStorage } from \"./useLocalStorage\";\n\n//Esta herramienta nos permite compartir los esatados de todos los componentes de la navegacion sienod este un objeto\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoContext = /*#__PURE__*/React.createContext();\nfunction TodoProvider(props) {\n  _s();\n  //Nuesro hook cuenta con estados, obviamente cambiando a objetos\n  const {\n    item: todos,\n    savedItem: savedTodos,\n    loading,\n    error\n  } = useLocalStorage(\"TODOS_V1\", []);\n\n  //Creamos nuestros estados a traves de nuestro searchValue y esto hace que haya una posuble reutilizacion de los componentes esto nos ayudara al cambio de estado dinamico\n  const [searchValue, setSearchValue] = React.useState('');\n\n  //Estado para modal abrir \n  const [openModal, setOpenModal] = React.useState(false);\n\n  //CUantos todos hemos completado, a traves de nuestro todo viendo la propiedad interesante la forma de validacion con doble signo de admiiracion\n  const completedTodos = todos.filter(todo => !!todo.completed).length;\n  const totalTodos = todos.length; //Total de todos\n\n  //Buscar si no han escrito nada en un arreglo con el input\n  let searchedTodos = [];\n  //Vemos si search es mayor que 1 para ver si no han escrito se muetsrasn igual\n\n  /*Otra forma de realizarlo es un poco mas compacto\n  const todosFiltered = todos.filter(todo => todo.text.toLowerCase().includes(searchValue.toLowerCase()));\n  */\n\n  if (!searchValue.length >= 1) {\n    searchedTodos = todos;\n  }\n  //Vamos a filtrar cantidad de todos en la listay convertimos todas las minisuculas en mayusuclas\n  else {\n    //Con esto lo que logramos hacer esque convertimos el input a minusculas de lo que hacemos es llamar a nuestro evento filterdonde buscaremos cada componente rendreizado\n    searchedTodos = todos.filter(todo => {\n      const todoText = todo.text.toLowerCase();\n      const searchText = searchValue.toLowerCase();\n      //De esta forma comparamos con string cuales hay\n      return todoText.includes(searchText);\n    });\n  }\n\n  //Esto es para marcar la funcion como completado, el id es text que ocuparemos\n  const completeTodos = text => {\n    //Metodo que encuentra el Index\n    const todoIndex = todos.findIndex(todo => todo.text === text);\n\n    //Lista de todos entramos y por cada estado de todo Index cambiamos a true\n\n    // todos[todoIndex] = {\n    //   text: todos[todoIndex].text,\n    //   completed: true,\n    // };\n\n    //De esta forma inyectamos todos los todos esto para hacer los rededenres cambiar los estados con lso 3 puntos inyectamos todos\n    const newTodos = [...todos];\n    //Forma facil de desarrollar los estados clonando todos\n    newTodos[todoIndex].completed = true;\n    //Causamos el redender con nuestros todos para obtener\n    savedTodos(newTodos);\n  };\n\n  //Esto para eliminar un arreglo\n  const deleteTodos = text => {\n    const todoIndex = todos.findIndex(todo => todo.text === text);\n    const newTodos = [...todos];\n    //El método splice() cambia el contenido de un array eliminando elementos existentes y/o agregando nuevos elementos.\n    //En esta caso solo ponemos 1 para un todo eliminado\n    newTodos.splice(todoIndex, 1);\n    //nuestro render\n    savedTodos(newTodos);\n  };\n\n  //  console.log('Antes del use effect');\n  //  //Este hook lo que hace es renderizar un useEffect lo que hace es antes de renderizar en el html del cliente react acabo de hacer todo eso\n  //  React.useEffect(() =>{\n  //      console.log('use effect');\n  //      //El array nos ayuda a que nuestro efecto solo se renderize una vez\n  //      //Lo condicionamos cada que un todo se mueve\n  //  }, [totalTodos]);\n\n  // console.log('Despues del use effect');\n\n  return (\n    /*#__PURE__*/\n    //Lo que hace interesante esque tenga por dentro cualquier componente dentro de los componentes, basicmanetetrayendo todos los props, ocupamos value par acompoartir propiedades dobles llaves\n    _jsxDEV(TodoContext.Provider, {\n      value: {\n        loading,\n        error,\n        totalTodos,\n        completedTodos,\n        searchValue,\n        setSearchValue,\n        searchedTodos,\n        completeTodos,\n        deleteTodos,\n        setOpenModal,\n        openModal\n      },\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(TodoProvider, \"RGw+Mvz+8XLHPf3duuHjekFlI9A=\", false, function () {\n  return [useLocalStorage];\n});\n_c = TodoProvider;\nexport { TodoContext, TodoProvider };\n\n//Sacamos las propiedad provider y el consumer lo que hace el provider es para envolver toda la aplicacion, y el consumer es para tomar la informacion en nuestro estado\n{\n  /* <TodoContext.Provider></TodoContext.Provider>\n  <TodoContext.Consumer></TodoContext.Consumer> */\n}\nvar _c;\n$RefreshReg$(_c, \"TodoProvider\");","map":{"version":3,"names":["React","useLocalStorage","TodoContext","createContext","TodoProvider","props","item","todos","savedItem","savedTodos","loading","error","searchValue","setSearchValue","useState","openModal","setOpenModal","completedTodos","filter","todo","completed","length","totalTodos","searchedTodos","todoText","text","toLowerCase","searchText","includes","completeTodos","todoIndex","findIndex","newTodos","deleteTodos","splice","children"],"sources":["/home/jorgebg/personalProjects/cursoReact/cursoReactIntroduccion/todo-machine/src/TodoContext/index.js"],"sourcesContent":["import React from \"react\";\nimport { useLocalStorage } from \"./useLocalStorage\";\n\n//Esta herramienta nos permite compartir los esatados de todos los componentes de la navegacion sienod este un objeto\nconst TodoContext = React.createContext();\n\nfunction TodoProvider(props) {\n  //Nuesro hook cuenta con estados, obviamente cambiando a objetos\n  const {\n    item: todos,\n    savedItem: savedTodos,\n    loading,\n    error,\n  } = useLocalStorage(\"TODOS_V1\", []);\n\n  //Creamos nuestros estados a traves de nuestro searchValue y esto hace que haya una posuble reutilizacion de los componentes esto nos ayudara al cambio de estado dinamico\n  const [searchValue, setSearchValue] = React.useState('');\n\n  //Estado para modal abrir \n  const [openModal, setOpenModal] = React.useState(false);\n\n  //CUantos todos hemos completado, a traves de nuestro todo viendo la propiedad interesante la forma de validacion con doble signo de admiiracion\n  const completedTodos = todos.filter((todo) => !!todo.completed).length;\n  const totalTodos = todos.length; //Total de todos\n\n  //Buscar si no han escrito nada en un arreglo con el input\n  let searchedTodos = [];\n  //Vemos si search es mayor que 1 para ver si no han escrito se muetsrasn igual\n\n  /*Otra forma de realizarlo es un poco mas compacto\n  const todosFiltered = todos.filter(todo => todo.text.toLowerCase().includes(searchValue.toLowerCase()));\n  */\n\n  if (!searchValue.length >= 1) {\n    searchedTodos = todos;\n  }\n  //Vamos a filtrar cantidad de todos en la listay convertimos todas las minisuculas en mayusuclas\n  else {\n    //Con esto lo que logramos hacer esque convertimos el input a minusculas de lo que hacemos es llamar a nuestro evento filterdonde buscaremos cada componente rendreizado\n    searchedTodos = todos.filter((todo) => {\n      const todoText = todo.text.toLowerCase();\n      const searchText = searchValue.toLowerCase();\n      //De esta forma comparamos con string cuales hay\n      return todoText.includes(searchText);\n    });\n  }\n\n  //Esto es para marcar la funcion como completado, el id es text que ocuparemos\n  const completeTodos = (text) => {\n    //Metodo que encuentra el Index\n    const todoIndex = todos.findIndex((todo) => todo.text === text);\n\n    //Lista de todos entramos y por cada estado de todo Index cambiamos a true\n\n    // todos[todoIndex] = {\n    //   text: todos[todoIndex].text,\n    //   completed: true,\n    // };\n\n    //De esta forma inyectamos todos los todos esto para hacer los rededenres cambiar los estados con lso 3 puntos inyectamos todos\n    const newTodos = [...todos];\n    //Forma facil de desarrollar los estados clonando todos\n    newTodos[todoIndex].completed = true;\n    //Causamos el redender con nuestros todos para obtener\n    savedTodos(newTodos);\n  };\n\n  //Esto para eliminar un arreglo\n  const deleteTodos = (text) => {\n    const todoIndex = todos.findIndex((todo) => todo.text === text);\n\n    const newTodos = [...todos];\n    //El método splice() cambia el contenido de un array eliminando elementos existentes y/o agregando nuevos elementos.\n    //En esta caso solo ponemos 1 para un todo eliminado\n    newTodos.splice(todoIndex, 1);\n    //nuestro render\n    savedTodos(newTodos);\n  };\n\n  //  console.log('Antes del use effect');\n  //  //Este hook lo que hace es renderizar un useEffect lo que hace es antes de renderizar en el html del cliente react acabo de hacer todo eso\n  //  React.useEffect(() =>{\n  //      console.log('use effect');\n  //      //El array nos ayuda a que nuestro efecto solo se renderize una vez\n  //      //Lo condicionamos cada que un todo se mueve\n  //  }, [totalTodos]);\n\n  // console.log('Despues del use effect');\n\n  return (\n    //Lo que hace interesante esque tenga por dentro cualquier componente dentro de los componentes, basicmanetetrayendo todos los props, ocupamos value par acompoartir propiedades dobles llaves\n    <TodoContext.Provider value={{\n     loading,\n     error,\n     totalTodos,\n     completedTodos,\n     searchValue,\n     setSearchValue,\n     searchedTodos,\n     completeTodos,\n     deleteTodos,\n     setOpenModal,\n     openModal,\n    }}>{props.children}</TodoContext.Provider>\n  );\n}\n\nexport {TodoContext, TodoProvider};\n\n//Sacamos las propiedad provider y el consumer lo que hace el provider es para envolver toda la aplicacion, y el consumer es para tomar la informacion en nuestro estado\n{\n  /* <TodoContext.Provider></TodoContext.Provider>\n<TodoContext.Consumer></TodoContext.Consumer> */\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,eAAe,QAAQ,mBAAmB;;AAEnD;AAAA;AACA,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAa,EAAE;AAEzC,SAASC,YAAY,CAACC,KAAK,EAAE;EAAA;EAC3B;EACA,MAAM;IACJC,IAAI,EAAEC,KAAK;IACXC,SAAS,EAAEC,UAAU;IACrBC,OAAO;IACPC;EACF,CAAC,GAAGV,eAAe,CAAC,UAAU,EAAE,EAAE,CAAC;;EAEnC;EACA,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGb,KAAK,CAACc,QAAQ,CAAC,EAAE,CAAC;;EAExD;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGhB,KAAK,CAACc,QAAQ,CAAC,KAAK,CAAC;;EAEvD;EACA,MAAMG,cAAc,GAAGV,KAAK,CAACW,MAAM,CAAEC,IAAI,IAAK,CAAC,CAACA,IAAI,CAACC,SAAS,CAAC,CAACC,MAAM;EACtE,MAAMC,UAAU,GAAGf,KAAK,CAACc,MAAM,CAAC,CAAC;;EAEjC;EACA,IAAIE,aAAa,GAAG,EAAE;EACtB;;EAEA;AACF;AACA;;EAEE,IAAI,CAACX,WAAW,CAACS,MAAM,IAAI,CAAC,EAAE;IAC5BE,aAAa,GAAGhB,KAAK;EACvB;EACA;EAAA,KACK;IACH;IACAgB,aAAa,GAAGhB,KAAK,CAACW,MAAM,CAAEC,IAAI,IAAK;MACrC,MAAMK,QAAQ,GAAGL,IAAI,CAACM,IAAI,CAACC,WAAW,EAAE;MACxC,MAAMC,UAAU,GAAGf,WAAW,CAACc,WAAW,EAAE;MAC5C;MACA,OAAOF,QAAQ,CAACI,QAAQ,CAACD,UAAU,CAAC;IACtC,CAAC,CAAC;EACJ;;EAEA;EACA,MAAME,aAAa,GAAIJ,IAAI,IAAK;IAC9B;IACA,MAAMK,SAAS,GAAGvB,KAAK,CAACwB,SAAS,CAAEZ,IAAI,IAAKA,IAAI,CAACM,IAAI,KAAKA,IAAI,CAAC;;IAE/D;;IAEA;IACA;IACA;IACA;;IAEA;IACA,MAAMO,QAAQ,GAAG,CAAC,GAAGzB,KAAK,CAAC;IAC3B;IACAyB,QAAQ,CAACF,SAAS,CAAC,CAACV,SAAS,GAAG,IAAI;IACpC;IACAX,UAAU,CAACuB,QAAQ,CAAC;EACtB,CAAC;;EAED;EACA,MAAMC,WAAW,GAAIR,IAAI,IAAK;IAC5B,MAAMK,SAAS,GAAGvB,KAAK,CAACwB,SAAS,CAAEZ,IAAI,IAAKA,IAAI,CAACM,IAAI,KAAKA,IAAI,CAAC;IAE/D,MAAMO,QAAQ,GAAG,CAAC,GAAGzB,KAAK,CAAC;IAC3B;IACA;IACAyB,QAAQ,CAACE,MAAM,CAACJ,SAAS,EAAE,CAAC,CAAC;IAC7B;IACArB,UAAU,CAACuB,QAAQ,CAAC;EACtB,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;IAAA;IACE;IACA,QAAC,WAAW,CAAC,QAAQ;MAAC,KAAK,EAAE;QAC5BtB,OAAO;QACPC,KAAK;QACLW,UAAU;QACVL,cAAc;QACdL,WAAW;QACXC,cAAc;QACdU,aAAa;QACbM,aAAa;QACbI,WAAW;QACXjB,YAAY;QACZD;MACD,CAAE;MAAA,UAAEV,KAAK,CAAC8B;IAAQ;MAAA;MAAA;MAAA;IAAA;EAAwB;AAE9C;AAAC,GAnGQ/B,YAAY;EAAA,QAOfH,eAAe;AAAA;AAAA,KAPZG,YAAY;AAqGrB,SAAQF,WAAW,EAAEE,YAAY;;AAEjC;AACA;EACE;AACF;AADE;AAED;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}