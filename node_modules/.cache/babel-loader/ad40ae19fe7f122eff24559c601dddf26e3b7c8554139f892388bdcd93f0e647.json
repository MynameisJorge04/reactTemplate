{"ast":null,"code":"import _toConsumableArray from\"/home/jorgebg/personalProjects/cursoReact/cursoReactIntroduccion/todo-machine/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/home/jorgebg/personalProjects/cursoReact/cursoReactIntroduccion/todo-machine/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React from\"react\";import{useLocalStorage}from\"./useLocalStorage\";//Esta herramienta nos permite compartir los esatados de todos los componentes de la navegacion sienod este un objeto\nimport{jsx as _jsx}from\"react/jsx-runtime\";var TodoContext=/*#__PURE__*/React.createContext();function TodoProvider(props){//Nuesro hook cuenta con estados, obviamente cambiando a objetos\nvar _useLocalStorage=useLocalStorage(\"TODOS_V1\",[]),todos=_useLocalStorage.item,savedTodos=_useLocalStorage.saveItem,loading=_useLocalStorage.loading,error=_useLocalStorage.error;//Creamos nuestros estados a traves de nuestro searchValue y esto hace que haya una posuble reutilizacion de los componentes esto nos ayudara al cambio de estado dinamico\nvar _React$useState=React.useState(''),_React$useState2=_slicedToArray(_React$useState,2),searchValue=_React$useState2[0],setSearchValue=_React$useState2[1];//Estado para modal abrir \nvar _React$useState3=React.useState(false),_React$useState4=_slicedToArray(_React$useState3,2),openModal=_React$useState4[0],setOpenModal=_React$useState4[1];//CUantos todos hemos completado, a traves de nuestro todo viendo la propiedad interesante la forma de validacion con doble signo de admiiracion\nvar completedTodos=todos.filter(function(todo){return!!todo.completed;}).length;var totalTodos=todos.length;//Total de todos\n//Buscar si no han escrito nada en un arreglo con el input\nvar searchedTodos=[];//Vemos si search es mayor que 1 para ver si no han escrito se muetsrasn igual\n/*Otra forma de realizarlo es un poco mas compacto\n  const todosFiltered = todos.filter(todo => todo.text.toLowerCase().includes(searchValue.toLowerCase()));\n  */if(!searchValue.length>=1){searchedTodos=todos;}//Vamos a filtrar cantidad de todos en la listay convertimos todas las minisuculas en mayusuclas\nelse{//Con esto lo que logramos hacer esque convertimos el input a minusculas de lo que hacemos es llamar a nuestro evento filterdonde buscaremos cada componente rendreizado\nsearchedTodos=todos.filter(function(todo){var todoText=todo.text.toLowerCase();var searchText=searchValue.toLowerCase();//De esta forma comparamos con string cuales hay\nreturn todoText.includes(searchText);});}//Esto es para marcar la funcion como completado, el id es text que ocuparemos\nvar completeTodos=function completeTodos(text){//Metodo que encuentra el Index\nvar todoIndex=todos.findIndex(function(todo){return todo.text===text;});//Lista de todos entramos y por cada estado de todo Index cambiamos a true\n// todos[todoIndex] = {\n//   text: todos[todoIndex].text,\n//   completed: true,\n// };\n//De esta forma inyectamos todos los todos esto para hacer los rededenres cambiar los estados con lso 3 puntos inyectamos todos\nvar newTodos=_toConsumableArray(todos);//Forma facil de desarrollar los estados clonando todos\nnewTodos[todoIndex].completed=true;//Causamos el redender con nuestros todos para obtener\nsavedTodos(newTodos);};//Esto es para añadir todos dentro de nuestro arreglo\nvar addTodos=function addTodos(text){//Tenemos nuestro arreglo\nvar newTodos=_toConsumableArray(todos);newTodos.push({completed:false,text:text});//Guardamos nuestro arreglo\nsavedTodos(newTodos);};//Esto para eliminar un arreglo\nvar deleteTodos=function deleteTodos(text){var todoIndex=todos.findIndex(function(todo){return todo.text===text;});var newTodos=_toConsumableArray(todos);//El método splice() cambia el contenido de un array eliminando elementos existentes y/o agregando nuevos elementos.\n//En esta caso solo ponemos 1 para un todo eliminado\nnewTodos.splice(todoIndex,1);//nuestro render\nsavedTodos(newTodos);};//  console.log('Antes del use effect');\n//  //Este hook lo que hace es renderizar un useEffect lo que hace es antes de renderizar en el html del cliente react acabo de hacer todo eso\n//  React.useEffect(() =>{\n//      console.log('use effect');\n//      //El array nos ayuda a que nuestro efecto solo se renderize una vez\n//      //Lo condicionamos cada que un todo se mueve\n//  }, [totalTodos]);\n// console.log('Despues del use effect');\nreturn/*#__PURE__*/ (//Lo que hace interesante esque tenga por dentro cualquier componente dentro de los componentes, basicmanetetrayendo todos los props, ocupamos value par acompoartir propiedades dobles llaves\n_jsx(TodoContext.Provider,{value:{loading:loading,error:error,totalTodos:totalTodos,addTodos:addTodos,completedTodos:completedTodos,searchValue:searchValue,setSearchValue:setSearchValue,searchedTodos:searchedTodos,completeTodos:completeTodos,deleteTodos:deleteTodos,setOpenModal:setOpenModal,openModal:openModal},children:props.children}));}export{TodoContext,TodoProvider};//Sacamos las propiedad provider y el consumer lo que hace el provider es para envolver toda la aplicacion, y el consumer es para tomar la informacion en nuestro estado\n/* <TodoContext.Provider></TodoContext.Provider>\n<TodoContext.Consumer></TodoContext.Consumer> */","map":{"version":3,"names":["React","useLocalStorage","TodoContext","createContext","TodoProvider","props","todos","item","savedTodos","saveItem","loading","error","useState","searchValue","setSearchValue","openModal","setOpenModal","completedTodos","filter","todo","completed","length","totalTodos","searchedTodos","todoText","text","toLowerCase","searchText","includes","completeTodos","todoIndex","findIndex","newTodos","addTodos","push","deleteTodos","splice","children"],"sources":["/home/jorgebg/personalProjects/cursoReact/cursoReactIntroduccion/todo-machine/src/TodoContext/index.js"],"sourcesContent":["import React from \"react\";\nimport { useLocalStorage } from \"./useLocalStorage\";\n\n//Esta herramienta nos permite compartir los esatados de todos los componentes de la navegacion sienod este un objeto\nconst TodoContext = React.createContext();\n\nfunction TodoProvider(props) {\n  //Nuesro hook cuenta con estados, obviamente cambiando a objetos\n  const {\n    item: todos,\n    saveItem: savedTodos,\n    loading,\n    error,\n  } = useLocalStorage(\"TODOS_V1\", []);\n\n  //Creamos nuestros estados a traves de nuestro searchValue y esto hace que haya una posuble reutilizacion de los componentes esto nos ayudara al cambio de estado dinamico\n  const [searchValue, setSearchValue] = React.useState('');\n\n  //Estado para modal abrir \n  const [openModal, setOpenModal] = React.useState(false);\n\n  //CUantos todos hemos completado, a traves de nuestro todo viendo la propiedad interesante la forma de validacion con doble signo de admiiracion\n  const completedTodos = todos.filter((todo) => !!todo.completed).length;\n  const totalTodos = todos.length; //Total de todos\n\n  //Buscar si no han escrito nada en un arreglo con el input\n  let searchedTodos = [];\n  //Vemos si search es mayor que 1 para ver si no han escrito se muetsrasn igual\n\n  /*Otra forma de realizarlo es un poco mas compacto\n  const todosFiltered = todos.filter(todo => todo.text.toLowerCase().includes(searchValue.toLowerCase()));\n  */\n\n  if (!searchValue.length >= 1) {\n    searchedTodos = todos;\n  }\n  //Vamos a filtrar cantidad de todos en la listay convertimos todas las minisuculas en mayusuclas\n  else {\n    //Con esto lo que logramos hacer esque convertimos el input a minusculas de lo que hacemos es llamar a nuestro evento filterdonde buscaremos cada componente rendreizado\n    searchedTodos = todos.filter((todo) => {\n      const todoText = todo.text.toLowerCase();\n      const searchText = searchValue.toLowerCase();\n      //De esta forma comparamos con string cuales hay\n      return todoText.includes(searchText);\n    });\n  }\n\n  //Esto es para marcar la funcion como completado, el id es text que ocuparemos\n  const completeTodos = (text) => {\n    //Metodo que encuentra el Index\n    const todoIndex = todos.findIndex((todo) => todo.text === text);\n\n    //Lista de todos entramos y por cada estado de todo Index cambiamos a true\n\n    // todos[todoIndex] = {\n    //   text: todos[todoIndex].text,\n    //   completed: true,\n    // };\n\n    //De esta forma inyectamos todos los todos esto para hacer los rededenres cambiar los estados con lso 3 puntos inyectamos todos\n    const newTodos = [...todos];\n    //Forma facil de desarrollar los estados clonando todos\n    newTodos[todoIndex].completed = true;\n    //Causamos el redender con nuestros todos para obtener\n    savedTodos(newTodos);\n  };\n\n  //Esto es para añadir todos dentro de nuestro arreglo\n  const addTodos = (text) => {\n    //Tenemos nuestro arreglo\n    const newTodos = [...todos];\n    \n    newTodos.push({\n      completed: false,\n      text,\n    });\n\n    //Guardamos nuestro arreglo\n    savedTodos(newTodos);\n  };\n\n  //Esto para eliminar un arreglo\n  const deleteTodos = (text) => {\n    const todoIndex = todos.findIndex((todo) => todo.text === text);\n\n    const newTodos = [...todos];\n    //El método splice() cambia el contenido de un array eliminando elementos existentes y/o agregando nuevos elementos.\n    //En esta caso solo ponemos 1 para un todo eliminado\n    newTodos.splice(todoIndex, 1);\n    //nuestro render\n    savedTodos(newTodos);\n  };\n\n  //  console.log('Antes del use effect');\n  //  //Este hook lo que hace es renderizar un useEffect lo que hace es antes de renderizar en el html del cliente react acabo de hacer todo eso\n  //  React.useEffect(() =>{\n  //      console.log('use effect');\n  //      //El array nos ayuda a que nuestro efecto solo se renderize una vez\n  //      //Lo condicionamos cada que un todo se mueve\n  //  }, [totalTodos]);\n\n  // console.log('Despues del use effect');\n\n  return (\n    //Lo que hace interesante esque tenga por dentro cualquier componente dentro de los componentes, basicmanetetrayendo todos los props, ocupamos value par acompoartir propiedades dobles llaves\n    <TodoContext.Provider value={{\n     loading,\n     error,\n     totalTodos,\n     addTodos,\n     completedTodos,\n     searchValue,\n     setSearchValue,\n     searchedTodos,\n     completeTodos,\n     deleteTodos,\n     setOpenModal,\n     openModal,\n    }}>{props.children}</TodoContext.Provider>\n  );\n}\n\nexport {TodoContext, TodoProvider};\n\n//Sacamos las propiedad provider y el consumer lo que hace el provider es para envolver toda la aplicacion, y el consumer es para tomar la informacion en nuestro estado\n\n/* <TodoContext.Provider></TodoContext.Provider>\n<TodoContext.Consumer></TodoContext.Consumer> */\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}