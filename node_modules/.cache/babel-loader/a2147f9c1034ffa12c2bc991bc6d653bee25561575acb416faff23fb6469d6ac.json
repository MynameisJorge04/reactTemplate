{"ast":null,"code":"import React from\"react\";import{TodoContext}from\"../TodoContext\";import{TodoCounter}from\"../TodoCounter\";import{TodoItem}from\"../TodoItem\";import{TodoForm}from\"../TodoForm\";import{TodoSearch}from\"../TodoSearch\";import{TodoList}from\"../TodoList\";import{CreateTodoButton}from\"../CreateTodoButton\";import{TodoHeader}from\"../TodoHeader\";import{Modal}from\"../Modal\";//Podemos tener un envolvimiento de propos con reactcontext\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function AppUI(){// El hook de contexto nos ayuda a acceder a datos globales de nuestro  contexto, desde cualquier componente hijo, sin tener que pasar estos datos por props componente por componente.\nvar _React$useContext=React.useContext(TodoContext),error=_React$useContext.error,loading=_React$useContext.loading,searchedTodos=_React$useContext.searchedTodos,completeTodos=_React$useContext.completeTodos,deleteTodos=_React$useContext.deleteTodos,openModal=_React$useContext.openModal,setOpenModal=_React$useContext.setOpenModal;return/*#__PURE__*/ (//Soporta un componente solamente\n//Esta etiqueta nos funciona para calculos internos solo enviamos una etiqueta por componente envolver para quitar cantidad divs\n//Para comentar o poner javascript con las {} claves\n_jsxs(React.Fragment,{children:[/*#__PURE__*/ //Para evitar confusiones no se debe dar class si no que se da con class name evitar clases de js\n//La magia de JSX es las propiedades que hay\n_jsx(TodoHeader,{})//Poner nuestros elementos\n//Todocounter es el que marcara el numero de todos completados\n,/*#__PURE__*/_jsx(TodoCounter,{}),/*#__PURE__*/_jsx(TodoSearch,{}),/*#__PURE__*/_jsxs(TodoList,{children:[//Controlamos de esta manera si hay un estado de error etc\nerror&&/*#__PURE__*/_jsx(\"p\",{children:\"Desesperate, hubo un error...\"}),loading&&/*#__PURE__*/_jsx(\"p\",{children:\"Estamos cargando, no desesperes...\"}),//Esto se comprende como el manejo de efectos dependeiendo del numero total se desprende un texto etc\n!loading&&!searchedTodos.length&&/*#__PURE__*/_jsx(\"p\",{children:\"Crea tu primer todo\"}),searchedTodos.map(function(todo){return/*#__PURE__*/ (//Tomemos en cuenta que hay que tener un identificador de lista asi como un ID en abse de datos\n_jsx(TodoItem,{text:todo.text//Enviamos una nueva propiedad que se llame completed\n,completed:todo.completed//Enviamos las propiedas a nuestro componente para la actualizacion y re-renderizacion de todos\n,onComplete:function onComplete(){return completeTodos(todo.text);},onDelete:function onDelete(){return deleteTodos(todo.text);}},todo.text));})]}),!!openModal&&/*#__PURE__*/_jsx(Modal,{children:/*#__PURE__*/_jsx(TodoForm,{})}),/*#__PURE__*/_jsx(CreateTodoButton,{setOpenModal:setOpenModal})]}));}export{AppUI};","map":{"version":3,"names":["React","TodoContext","TodoCounter","TodoItem","TodoForm","TodoSearch","TodoList","CreateTodoButton","TodoHeader","Modal","AppUI","useContext","error","loading","searchedTodos","completeTodos","deleteTodos","openModal","setOpenModal","length","map","todo","text","completed"],"sources":["/home/jorgebg/personalProjects/cursoReact/cursoReactIntroduccion/todo-machine/src/App/AppUI.js"],"sourcesContent":["import React from \"react\";\nimport { TodoContext } from \"../TodoContext\";\nimport { TodoCounter } from \"../TodoCounter\";\nimport { TodoItem } from \"../TodoItem\";\nimport { TodoForm } from \"../TodoForm\";\nimport { TodoSearch } from \"../TodoSearch\";\nimport { TodoList } from \"../TodoList\";\nimport { CreateTodoButton } from \"../CreateTodoButton\";\nimport { TodoHeader } from \"../TodoHeader\";\nimport { Modal } from \"../Modal\";\n\n\n//Podemos tener un envolvimiento de propos con reactcontext\n\nfunction AppUI() {\n  // El hook de contexto nos ayuda a acceder a datos globales de nuestro  contexto, desde cualquier componente hijo, sin tener que pasar estos datos por props componente por componente.\n  const {\n    error,\n    loading,\n    searchedTodos,\n    completeTodos,\n    deleteTodos,\n    openModal,\n    setOpenModal,\n  } = React.useContext(TodoContext);\n\n  return (\n    //Soporta un componente solamente\n    //Esta etiqueta nos funciona para calculos internos solo enviamos una etiqueta por componente envolver para quitar cantidad divs\n    //Para comentar o poner javascript con las {} claves\n    <React.Fragment>\n      {\n        //Para evitar confusiones no se debe dar class si no que se da con class name evitar clases de js\n        //La magia de JSX es las propiedades que hay\n        <TodoHeader />\n        //Poner nuestros elementos\n        //Todocounter es el que marcara el numero de todos completados\n      }\n      <TodoCounter />\n\n      {\n        //El input de busqueda que escribamos\n        //podemos crear a traves de react nuestra app principal los valores de estados de nuestra app\n      }\n      <TodoSearch />\n\n      {\n        //COntenedor de todos con lista\n        //Tenemos nuestro componente que sera el recursivo reutilizable, utilizando map rendrizando\n        //Podemos ocupar Consumer vamos a enviar funcion con renders\n      }\n\n      {/* Podemos observar que tenemos nuestros valores podemos para enviar esto sin necesidad de tener componentes */}\n      <TodoList>\n        {\n          //Controlamos de esta manera si hay un estado de error etc\n          error && <p>Desesperate, hubo un error...</p>\n        }\n        {loading && <p>Estamos cargando, no desesperes...</p>}\n\n        {\n          //Esto se comprende como el manejo de efectos dependeiendo del numero total se desprende un texto etc\n          !loading && !searchedTodos.length && <p>Crea tu primer todo</p>\n        }\n\n        {searchedTodos.map((todo) => (\n          //Tomemos en cuenta que hay que tener un identificador de lista asi como un ID en abse de datos\n          <TodoItem\n            key={todo.text}\n            text={todo.text}\n            //Enviamos una nueva propiedad que se llame completed\n            completed={todo.completed}\n            //Enviamos las propiedas a nuestro componente para la actualizacion y re-renderizacion de todos\n            onComplete={() => completeTodos(todo.text)}\n            onDelete={() => deleteTodos(todo.text)}\n          />\n        ))}\n      </TodoList>\n      {/* Recuerda que la doble negacion significa que es igual a true hacemos validacion para ense√±ar el componente teletransportado */}\n\n      {!!openModal && (\n        <Modal>\n          <TodoForm />\n        </Modal>\n      )}\n\n      <CreateTodoButton setOpenModal={setOpenModal} />\n    </React.Fragment>\n  );\n}\n\nexport { AppUI };\n"],"mappings":"AAAA,MAAOA,MAAK,KAAM,OAAO,CACzB,OAASC,WAAW,KAAQ,gBAAgB,CAC5C,OAASC,WAAW,KAAQ,gBAAgB,CAC5C,OAASC,QAAQ,KAAQ,aAAa,CACtC,OAASC,QAAQ,KAAQ,aAAa,CACtC,OAASC,UAAU,KAAQ,eAAe,CAC1C,OAASC,QAAQ,KAAQ,aAAa,CACtC,OAASC,gBAAgB,KAAQ,qBAAqB,CACtD,OAASC,UAAU,KAAQ,eAAe,CAC1C,OAASC,KAAK,KAAQ,UAAU,CAGhC;AAAA,wFAEA,QAASC,MAAK,EAAG,CACf;AACA,sBAQIV,KAAK,CAACW,UAAU,CAACV,WAAW,CAAC,CAP/BW,KAAK,mBAALA,KAAK,CACLC,OAAO,mBAAPA,OAAO,CACPC,aAAa,mBAAbA,aAAa,CACbC,aAAa,mBAAbA,aAAa,CACbC,WAAW,mBAAXA,WAAW,CACXC,SAAS,mBAATA,SAAS,CACTC,YAAY,mBAAZA,YAAY,CAGd,oBACE;AACA;AACA;AACA,MAAC,KAAK,CAAC,QAAQ,0BAEX;AACA;AACA,KAAC,UAAU,IACX;AACA;AAAA,cAEF,KAAC,WAAW,IAAG,cAMf,KAAC,UAAU,IAAG,cASd,MAAC,QAAQ,YAEL;AACAN,KAAK,eAAI,mBAAG,+BAA6B,EAAI,CAE9CC,OAAO,eAAI,mBAAG,oCAAkC,EAAI,CAGnD;AACA,CAACA,OAAO,EAAI,CAACC,aAAa,CAACK,MAAM,eAAI,mBAAG,qBAAmB,EAAI,CAGhEL,aAAa,CAACM,GAAG,CAAC,SAACC,IAAI,sBACtB;AACA,KAAC,QAAQ,EAEP,IAAI,CAAEA,IAAI,CAACC,IACX;AAAA,CACA,SAAS,CAAED,IAAI,CAACE,SAChB;AAAA,CACA,UAAU,CAAE,4BAAMR,cAAa,CAACM,IAAI,CAACC,IAAI,CAAC,EAAC,CAC3C,QAAQ,CAAE,0BAAMN,YAAW,CAACK,IAAI,CAACC,IAAI,CAAC,EAAC,EANlCD,IAAI,CAACC,IAAI,CAOd,GACH,CAAC,GACO,CAGV,CAAC,CAACL,SAAS,eACV,KAAC,KAAK,wBACJ,KAAC,QAAQ,IAAG,EAEf,cAED,KAAC,gBAAgB,EAAC,YAAY,CAAEC,YAAa,EAAG,GACjC,EAErB,CAEA,OAASR,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}