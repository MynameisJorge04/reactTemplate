{"ast":null,"code":"var _jsxFileName = \"/home/jorgebg/personalProjects/cursoReact/cursoReactIntroduccion/todo-machine/src/App.js\",\n  _s = $RefreshSig$();\n//pedimos a react que nos haga un paquete invisible\n//LLamamos a nuestro archivo todocounter traer la funcion no el archivo\nimport React from 'react';\nimport { TodoCounter } from './TodoCounter';\nimport { TodoItem } from './TodoItem';\nimport { TodoSearch } from './TodoSearch';\nimport { TodoList } from './TodoList';\nimport { CreateTodoButton } from './CreateTodoButton';\nimport { TodoHeader } from './TodoHeader';\nimport './App.css';\n\n//Ejemplo: tenemos una url \n//const url = \"https://.jpg\" podemos remplazar con el nombre de la variable\n\n//Esto se traduce a una clase en un div, que solo son llamados a react\n//Podemos obtener parametros de elementos desde nuestro index.js observamos que hay buenos\n//mensajes existentes\n\n//Lista falsa de todos\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defultTodos = [{\n  text: 'Cortar cebolla',\n  completed: false\n}, {\n  text: 'Tomar curso intro react',\n  completed: false\n}, {\n  text: 'Llorar con la lloran',\n  completed: false\n}, {\n  text: 'LALALALLALALAA',\n  completed: false\n}];\nfunction App() {\n  _s();\n  const [todos, setTodos] = React.useState(defultTodos);\n  //Creamos nuestros estados a traves de nuestro searchValue y esto hace que haya una posuble reutilizacion de los componentes esto nos ayudara al cambio de estado dinamico\n  const [searchValue, setSearchValue] = React.useState('');\n\n  //CUantos todos hemos completado, a traves de nuestro todo viendo la propiedad interesante la forma de validacion con doble signo de admiiracion\n  const completedTodos = todos.filter(todo => !!todo.completed).length;\n  const totalTodos = todos.length; //Total de todos\n\n  //Buscar si no han escrito nada en un arreglo con el input\n  let searchedTodos = [];\n  //Vemos si search es mayor que 1 para ver si no han escrito se muetsrasn igual\n\n  /*Otra forma de realizarlo es un poco mas compacto\n  const todosFiltered = todos.filter(todo => todo.text.toLowerCase().includes(searchValue.toLowerCase()));\n  */\n\n  if (!searchValue.length >= 1) {\n    searchedTodos = todos;\n  }\n  //Vamos a filtrar cantidad de todos en la listay convertimos todas las minisuculas en mayusuclas \n  else {\n    //Con esto lo que logramos hacer esque convertimos el input a minusculas de lo que hacemos es llamar a nuestro evento filterdonde buscaremos cada componente rendreizado\n    searchedTodos = todos.filter(todo => {\n      const todoText = todo.text.toLowerCase();\n      const searchText = searchValue.toLowerCase();\n      //De esta forma comparamos con string cuales hay\n      return todoText.includes(searchText);\n    });\n  }\n\n  //Esto es para marcar la funcion como completado, el id es text que ocuparemos\n  const completeTodos = text => {\n    //Metodo que encuentra el Index\n    const todoIndex = todos.findIndex(todo => todo.text === text);\n\n    //Lista de todos entramos y por cada estado de todo Index cambiamos a true\n\n    // todos[todoIndex] = {\n    //   text: todos[todoIndex].text,\n    //   completed: true,\n    // };\n\n    //De esta forma inyectamos todos los todos esto para hacer los rededenres cambiar los estados con lso 3 puntos inyectamos todos\n    const newTodos = [...todos];\n    //Forma facil de desarrollar los estados clonando todos\n    newTodos[todoIndex].completed = true;\n    //Causamos el redender con nuestros todos para obtener \n    setTodos(newTodos);\n  };\n\n  //Esto para eliminar un arreglo\n  const deleteTodos = text => {\n    const todoIndex = todos.findIndex(todo => todo.text === text);\n    const newTodos = [...todos];\n    //El mÃ©todo splice() cambia el contenido de un array eliminando elementos existentes y/o agregando nuevos elementos.\n    //En esta caso solo ponemos 1 para un todo eliminado\n    newTodos.splice(todoIndex, 1);\n    //nuestro render\n    setTodos(newTodos);\n  };\n  return (\n    /*#__PURE__*/\n    //Soporta un componente solamente\n    //Esta etiqueta nos funciona para calculos internos solo enviamos una etiqueta por componente envolver para quitar cantidad divs\n    //Para comentar o poner javascript con las {} claves\n    _jsxDEV(React.Fragment, {\n      children: [\n      /*#__PURE__*/\n      //Para evitar confusiones no se debe dar class si no que se da con class name evitar clases de js\n      //La magia de JSX es las propiedades que hay\n      _jsxDEV(TodoHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 5\n      }, this)\n      //Poner nuestros elementos\n      //Todocounter es el que marcara el numero de todos completados\n      , /*#__PURE__*/_jsxDEV(TodoCounter, {\n        total: totalTodos,\n        completed: completedTodos\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(TodoSearch, {\n        searchValue: searchValue,\n        setSearchValue: setSearchValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(TodoList, {\n        children: searchedTodos.map(todo =>\n        /*#__PURE__*/\n        //Tomemos en cuenta que hay que tener un identificador de lista asi como un ID en abse de datos\n        _jsxDEV(TodoItem, {\n          text: todo.text\n          //Enviamos una nueva propiedad que se llame completed\n          ,\n          completed: todo.completed\n          //Enviamos las propiedas a nuestro componente para la actualizacion y re-renderizacion de todos\n          ,\n          onComplete: () => completeTodos(todo.text),\n          onDelete: () => deleteTodos(todo.text)\n        }, todo.text, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(CreateTodoButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n//Encapsulamiento javascript\n_s(App, \"MF1AhHaQimgyhm/2VExrZ3MjRDY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","TodoCounter","TodoItem","TodoSearch","TodoList","CreateTodoButton","TodoHeader","defultTodos","text","completed","App","todos","setTodos","useState","searchValue","setSearchValue","completedTodos","filter","todo","length","totalTodos","searchedTodos","todoText","toLowerCase","searchText","includes","completeTodos","todoIndex","findIndex","newTodos","deleteTodos","splice","map"],"sources":["/home/jorgebg/personalProjects/cursoReact/cursoReactIntroduccion/todo-machine/src/App.js"],"sourcesContent":["//pedimos a react que nos haga un paquete invisible\n//LLamamos a nuestro archivo todocounter traer la funcion no el archivo\nimport React from 'react';\nimport { TodoCounter } from './TodoCounter';\nimport { TodoItem } from './TodoItem';\nimport { TodoSearch } from './TodoSearch';\nimport { TodoList } from './TodoList';\nimport { CreateTodoButton } from './CreateTodoButton';\nimport { TodoHeader } from './TodoHeader';\nimport './App.css';\n\n//Ejemplo: tenemos una url \n//const url = \"https://.jpg\" podemos remplazar con el nombre de la variable\n\n//Esto se traduce a una clase en un div, que solo son llamados a react\n//Podemos obtener parametros de elementos desde nuestro index.js observamos que hay buenos\n//mensajes existentes\n\n//Lista falsa de todos\n\nconst defultTodos = [\n  {text: 'Cortar cebolla', completed: false},\n  {text: 'Tomar curso intro react', completed: false},\n  {text: 'Llorar con la lloran', completed: false},\n  {text: 'LALALALLALALAA', completed: false},\n];\n\nfunction App() {\n\n  const [todos, setTodos] = React.useState(defultTodos);\n  //Creamos nuestros estados a traves de nuestro searchValue y esto hace que haya una posuble reutilizacion de los componentes esto nos ayudara al cambio de estado dinamico\n  const [searchValue, setSearchValue] = React.useState('');\n\n  //CUantos todos hemos completado, a traves de nuestro todo viendo la propiedad interesante la forma de validacion con doble signo de admiiracion\n  const completedTodos = todos.filter(todo => !!todo.completed).length;\n  const totalTodos = todos.length; //Total de todos\n\n  //Buscar si no han escrito nada en un arreglo con el input\n  let searchedTodos = [];\n  //Vemos si search es mayor que 1 para ver si no han escrito se muetsrasn igual\n\n  /*Otra forma de realizarlo es un poco mas compacto\n  const todosFiltered = todos.filter(todo => todo.text.toLowerCase().includes(searchValue.toLowerCase()));\n  */\n\n  if(!searchValue.length >= 1){\n    searchedTodos = todos;\n  } \n  //Vamos a filtrar cantidad de todos en la listay convertimos todas las minisuculas en mayusuclas \n  else {\n    //Con esto lo que logramos hacer esque convertimos el input a minusculas de lo que hacemos es llamar a nuestro evento filterdonde buscaremos cada componente rendreizado\n  searchedTodos = todos.filter(todo =>{\n    const todoText = todo.text.toLowerCase();\n    const searchText = searchValue.toLowerCase();\n    //De esta forma comparamos con string cuales hay\n    return todoText.includes(searchText);\n  });\n  }\n\n  //Esto es para marcar la funcion como completado, el id es text que ocuparemos\n  const completeTodos = (text) =>{\n    //Metodo que encuentra el Index\n    const todoIndex = todos.findIndex(todo => todo.text === text);\n\n    //Lista de todos entramos y por cada estado de todo Index cambiamos a true\n\n    // todos[todoIndex] = {\n    //   text: todos[todoIndex].text,\n    //   completed: true,\n    // };\n\n    //De esta forma inyectamos todos los todos esto para hacer los rededenres cambiar los estados con lso 3 puntos inyectamos todos\n    const newTodos = [...todos];\n    //Forma facil de desarrollar los estados clonando todos\n    newTodos[todoIndex].completed = true;\n    //Causamos el redender con nuestros todos para obtener \n    setTodos(newTodos);\n  }\n\n\n  //Esto para eliminar un arreglo\n  const deleteTodos = (text) =>{\n    const todoIndex = todos.findIndex(todo => todo.text === text);\n\n    const newTodos = [...todos];\n    //El mÃ©todo splice() cambia el contenido de un array eliminando elementos existentes y/o agregando nuevos elementos.\n    //En esta caso solo ponemos 1 para un todo eliminado\n    newTodos.splice(todoIndex, 1);\n    //nuestro render\n    setTodos(newTodos);\n  }\n\n  return (\n    //Soporta un componente solamente\n    //Esta etiqueta nos funciona para calculos internos solo enviamos una etiqueta por componente envolver para quitar cantidad divs\n    //Para comentar o poner javascript con las {} claves\n    <React.Fragment>\n    {//Para evitar confusiones no se debe dar class si no que se da con class name evitar clases de js\n    //La magia de JSX es las propiedades que hay\n    <TodoHeader/>\n    //Poner nuestros elementos\n    //Todocounter es el que marcara el numero de todos completados\n    }\n    <TodoCounter\n    total={totalTodos}\n    completed={completedTodos}\n    />\n\n    {//El input de busqueda que escribamos\n     //podemos crear a traves de react nuestra app principal los valores de estados de nuestra app\n    }\n    <TodoSearch\n      searchValue={searchValue}\n      setSearchValue={setSearchValue}\n    />\n    \n      \n    {//COntenedor de todos con lista\n    //Tenemos nuestro componente que sera el recursivo reutilizable, utilizando map rendrizando\n    }\n    <TodoList>\n      \n    {searchedTodos.map(todo => (\n          //Tomemos en cuenta que hay que tener un identificador de lista asi como un ID en abse de datos\n          <TodoItem \n          key={todo.text} \n          text={todo.text}\n          //Enviamos una nueva propiedad que se llame completed\n          completed={todo.completed}\n          //Enviamos las propiedas a nuestro componente para la actualizacion y re-renderizacion de todos\n          onComplete={() =>completeTodos(todo.text)}\n          onDelete={() =>deleteTodos(todo.text)}\n          />\n     ))}\n      \n    </TodoList>\n\n    <CreateTodoButton/>\n    </React.Fragment>\n    );\n\n    \n}\n\n//Encapsulamiento javascript\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,QAAQ,QAAQ,YAAY;AACrC,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,QAAQ,QAAQ,YAAY;AACrC,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,UAAU,QAAQ,cAAc;AACzC,OAAO,WAAW;;AAElB;AACA;;AAEA;AACA;AACA;;AAEA;AAAA;AAEA,MAAMC,WAAW,GAAG,CAClB;EAACC,IAAI,EAAE,gBAAgB;EAAEC,SAAS,EAAE;AAAK,CAAC,EAC1C;EAACD,IAAI,EAAE,yBAAyB;EAAEC,SAAS,EAAE;AAAK,CAAC,EACnD;EAACD,IAAI,EAAE,sBAAsB;EAAEC,SAAS,EAAE;AAAK,CAAC,EAChD;EAACD,IAAI,EAAE,gBAAgB;EAAEC,SAAS,EAAE;AAAK,CAAC,CAC3C;AAED,SAASC,GAAG,GAAG;EAAA;EAEb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,KAAK,CAACa,QAAQ,CAACN,WAAW,CAAC;EACrD;EACA,MAAM,CAACO,WAAW,EAAEC,cAAc,CAAC,GAAGf,KAAK,CAACa,QAAQ,CAAC,EAAE,CAAC;;EAExD;EACA,MAAMG,cAAc,GAAGL,KAAK,CAACM,MAAM,CAACC,IAAI,IAAI,CAAC,CAACA,IAAI,CAACT,SAAS,CAAC,CAACU,MAAM;EACpE,MAAMC,UAAU,GAAGT,KAAK,CAACQ,MAAM,CAAC,CAAC;;EAEjC;EACA,IAAIE,aAAa,GAAG,EAAE;EACtB;;EAEA;AACF;AACA;;EAEE,IAAG,CAACP,WAAW,CAACK,MAAM,IAAI,CAAC,EAAC;IAC1BE,aAAa,GAAGV,KAAK;EACvB;EACA;EAAA,KACK;IACH;IACFU,aAAa,GAAGV,KAAK,CAACM,MAAM,CAACC,IAAI,IAAG;MAClC,MAAMI,QAAQ,GAAGJ,IAAI,CAACV,IAAI,CAACe,WAAW,EAAE;MACxC,MAAMC,UAAU,GAAGV,WAAW,CAACS,WAAW,EAAE;MAC5C;MACA,OAAOD,QAAQ,CAACG,QAAQ,CAACD,UAAU,CAAC;IACtC,CAAC,CAAC;EACF;;EAEA;EACA,MAAME,aAAa,GAAIlB,IAAI,IAAI;IAC7B;IACA,MAAMmB,SAAS,GAAGhB,KAAK,CAACiB,SAAS,CAACV,IAAI,IAAIA,IAAI,CAACV,IAAI,KAAKA,IAAI,CAAC;;IAE7D;;IAEA;IACA;IACA;IACA;;IAEA;IACA,MAAMqB,QAAQ,GAAG,CAAC,GAAGlB,KAAK,CAAC;IAC3B;IACAkB,QAAQ,CAACF,SAAS,CAAC,CAAClB,SAAS,GAAG,IAAI;IACpC;IACAG,QAAQ,CAACiB,QAAQ,CAAC;EACpB,CAAC;;EAGD;EACA,MAAMC,WAAW,GAAItB,IAAI,IAAI;IAC3B,MAAMmB,SAAS,GAAGhB,KAAK,CAACiB,SAAS,CAACV,IAAI,IAAIA,IAAI,CAACV,IAAI,KAAKA,IAAI,CAAC;IAE7D,MAAMqB,QAAQ,GAAG,CAAC,GAAGlB,KAAK,CAAC;IAC3B;IACA;IACAkB,QAAQ,CAACE,MAAM,CAACJ,SAAS,EAAE,CAAC,CAAC;IAC7B;IACAf,QAAQ,CAACiB,QAAQ,CAAC;EACpB,CAAC;EAED;IAAA;IACE;IACA;IACA;IACA,QAAC,KAAK,CAAC,QAAQ;MAAA;MAAA;MACd;MACD;MACA,QAAC,UAAU;QAAA;QAAA;QAAA;MAAA;MACX;MACA;MAAA,eAEA,QAAC,WAAW;QACZ,KAAK,EAAET,UAAW;QAClB,SAAS,EAAEJ;MAAe;QAAA;QAAA;QAAA;MAAA,QACxB,eAKF,QAAC,UAAU;QACT,WAAW,EAAEF,WAAY;QACzB,cAAc,EAAEC;MAAe;QAAA;QAAA;QAAA;MAAA,QAC/B,eAMF,QAAC,QAAQ;QAAA,UAERM,aAAa,CAACW,GAAG,CAACd,IAAI;QAAA;QACjB;QACA,QAAC,QAAQ;UAET,IAAI,EAAEA,IAAI,CAACV;UACX;UAAA;UACA,SAAS,EAAEU,IAAI,CAACT;UAChB;UAAA;UACA,UAAU,EAAE,MAAKiB,aAAa,CAACR,IAAI,CAACV,IAAI,CAAE;UAC1C,QAAQ,EAAE,MAAKsB,WAAW,CAACZ,IAAI,CAACV,IAAI;QAAE,GANjCU,IAAI,CAACV,IAAI;UAAA;UAAA;UAAA;QAAA,QAQlB;MAAC;QAAA;QAAA;QAAA;MAAA,QAEQ,eAEX,QAAC,gBAAgB;QAAA;QAAA;QAAA;MAAA,QAAE;IAAA;MAAA;MAAA;MAAA;IAAA;EACF;AAIrB;;AAEA;AAAA,GArHSE,GAAG;AAAA,KAAHA,GAAG;AAsHZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}