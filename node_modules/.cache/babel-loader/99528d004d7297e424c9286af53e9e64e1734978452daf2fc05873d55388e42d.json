{"ast":null,"code":"var _jsxFileName = \"/home/jorgebg/personalProjects/cursoReact/cursoReactIntroduccion/todo-machine/src/App/index.js\",\n  _s = $RefreshSig$();\n//pedimos a react que nos haga un paquete invisible\n//LLamamos a nuestro archivo todocounter traer la funcion no el archivo\nimport React from 'react';\nimport { AppUI } from './AppUI';\n\n//Ejemplo: tenemos una url \n//const url = \"https://.jpg\" podemos remplazar con el nombre de la variable\n\n//Esto se traduce a una clase en un div, que solo son llamados a react\n//Podemos obtener parametros de elementos desde nuestro index.js observamos que hay buenos\n//mensajes existentes\n\n//Lista falsa de todos\n\n// const defultTodos = [\n//   {text: 'Cortar cebolla', completed: false},\n//   {text: 'Tomar curso intro react', completed: false},\n//   {text: 'Llorar con la lloran', completed: false},\n//   {text: 'LALALALLALALAA', completed: false},\n// ];\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //Casi siempre las APIS tienen ciertas versiones\n  const localStorageTodos = localStorage.getItem('TODOS_V1');\n\n  //Crear un primer array vacio con cosas vacias, tenbemos que traer la info guardada en local storage\n  let parsedTodos;\n\n  //Vemos si tiene informacion\n  if (!localStorageTodos) {\n    //Por defecto una lista de todos\n    localStorage.setItem('TODOS_V1', []);\n    parsedTodos = [];\n  }\n\n  //Ya tiene algunos todos\n  else {\n    parsedTodos = JSON.parse(localStorageTodos);\n  }\n  const [todos, setTodos] = React.useState(parsedTodos);\n  //Creamos nuestros estados a traves de nuestro searchValue y esto hace que haya una posuble reutilizacion de los componentes esto nos ayudara al cambio de estado dinamico\n  const [searchValue, setSearchValue] = React.useState('');\n\n  //CUantos todos hemos completado, a traves de nuestro todo viendo la propiedad interesante la forma de validacion con doble signo de admiiracion\n  const completedTodos = todos.filter(todo => !!todo.completed).length;\n  const totalTodos = todos.length; //Total de todos\n\n  //Buscar si no han escrito nada en un arreglo con el input\n  let searchedTodos = [];\n  //Vemos si search es mayor que 1 para ver si no han escrito se muetsrasn igual\n\n  /*Otra forma de realizarlo es un poco mas compacto\n  const todosFiltered = todos.filter(todo => todo.text.toLowerCase().includes(searchValue.toLowerCase()));\n  */\n\n  if (!searchValue.length >= 1) {\n    searchedTodos = todos;\n  }\n  //Vamos a filtrar cantidad de todos en la listay convertimos todas las minisuculas en mayusuclas \n  else {\n    //Con esto lo que logramos hacer esque convertimos el input a minusculas de lo que hacemos es llamar a nuestro evento filterdonde buscaremos cada componente rendreizado\n    searchedTodos = todos.filter(todo => {\n      const todoText = todo.text.toLowerCase();\n      const searchText = searchValue.toLowerCase();\n      //De esta forma comparamos con string cuales hay\n      return todoText.includes(searchText);\n    });\n  }\n\n  //Esto es para marcar la funcion como completado, el id es text que ocuparemos\n  const completeTodos = text => {\n    //Metodo que encuentra el Index\n    const todoIndex = todos.findIndex(todo => todo.text === text);\n\n    //Lista de todos entramos y por cada estado de todo Index cambiamos a true\n\n    // todos[todoIndex] = {\n    //   text: todos[todoIndex].text,\n    //   completed: true,\n    // };\n\n    //De esta forma inyectamos todos los todos esto para hacer los rededenres cambiar los estados con lso 3 puntos inyectamos todos\n    const newTodos = [...todos];\n    //Forma facil de desarrollar los estados clonando todos\n    newTodos[todoIndex].completed = true;\n    //Causamos el redender con nuestros todos para obtener \n    setTodos(newTodos);\n  };\n\n  //Esto para eliminar un arreglo\n  const deleteTodos = text => {\n    const todoIndex = todos.findIndex(todo => todo.text === text);\n    const newTodos = [...todos];\n    //El m√©todo splice() cambia el contenido de un array eliminando elementos existentes y/o agregando nuevos elementos.\n    //En esta caso solo ponemos 1 para un todo eliminado\n    newTodos.splice(todoIndex, 1);\n    //nuestro render\n    setTodos(newTodos);\n  };\n  return (\n    /*#__PURE__*/\n    //Creando toda la app desing de la pagina con los props de cada cosa\n    _jsxDEV(AppUI, {\n      totalTodos: totalTodos,\n      completedTodos: completedTodos,\n      searchValue: searchValue,\n      setSearchValue: setSearchValue,\n      searchedTodos: searchedTodos,\n      completeTodos: completeTodos,\n      deleteTodos: deleteTodos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }, this)\n\n    // //Soporta un componente solamente\n    // //Esta etiqueta nos funciona para calculos internos solo enviamos una etiqueta por componente envolver para quitar cantidad divs\n    // //Para comentar o poner javascript con las {} claves\n    // <React.Fragment>\n    // {//Para evitar confusiones no se debe dar class si no que se da con class name evitar clases de js\n    // //La magia de JSX es las propiedades que hay\n    // <TodoHeader/>\n    // //Poner nuestros elementos\n    // //Todocounter es el que marcara el numero de todos completados\n    // }\n    // <TodoCounter\n    // total={totalTodos}\n    // completed={completedTodos}\n    // />\n\n    // {//El input de busqueda que escribamos\n    //  //podemos crear a traves de react nuestra app principal los valores de estados de nuestra app\n    // }\n    // <TodoSearch\n    //   searchValue={searchValue}\n    //   setSearchValue={setSearchValue}\n    // />\n\n    // {//COntenedor de todos con lista\n    // //Tenemos nuestro componente que sera el recursivo reutilizable, utilizando map rendrizando\n    // }\n    // <TodoList>\n\n    // {searchedTodos.map(todo => (\n    //       //Tomemos en cuenta que hay que tener un identificador de lista asi como un ID en abse de datos\n    //       <TodoItem \n    //       key={todo.text} \n    //       text={todo.text}\n    //       //Enviamos una nueva propiedad que se llame completed\n    //       completed={todo.completed}\n    //       //Enviamos las propiedas a nuestro componente para la actualizacion y re-renderizacion de todos\n    //       onComplete={() =>completeTodos(todo.text)}\n    //       onDelete={() =>deleteTodos(todo.text)}\n    //       />\n    //  ))}\n\n    // </TodoList>\n\n    // <CreateTodoButton/>\n    // </React.Fragment>\n  );\n}\n\n//Encapsulamiento javascript\n_s(App, \"JqqZeAC4l8FYdoiUYLgUzTkkhNE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","AppUI","App","localStorageTodos","localStorage","getItem","parsedTodos","setItem","JSON","parse","todos","setTodos","useState","searchValue","setSearchValue","completedTodos","filter","todo","completed","length","totalTodos","searchedTodos","todoText","text","toLowerCase","searchText","includes","completeTodos","todoIndex","findIndex","newTodos","deleteTodos","splice"],"sources":["/home/jorgebg/personalProjects/cursoReact/cursoReactIntroduccion/todo-machine/src/App/index.js"],"sourcesContent":["//pedimos a react que nos haga un paquete invisible\n//LLamamos a nuestro archivo todocounter traer la funcion no el archivo\nimport React from 'react';\nimport { AppUI } from './AppUI'\n\n//Ejemplo: tenemos una url \n//const url = \"https://.jpg\" podemos remplazar con el nombre de la variable\n\n//Esto se traduce a una clase en un div, que solo son llamados a react\n//Podemos obtener parametros de elementos desde nuestro index.js observamos que hay buenos\n//mensajes existentes\n\n//Lista falsa de todos\n\n// const defultTodos = [\n//   {text: 'Cortar cebolla', completed: false},\n//   {text: 'Tomar curso intro react', completed: false},\n//   {text: 'Llorar con la lloran', completed: false},\n//   {text: 'LALALALLALALAA', completed: false},\n// ];\n\nfunction App() {\n\n  //Casi siempre las APIS tienen ciertas versiones\n  const localStorageTodos = localStorage.getItem('TODOS_V1');\n\n  //Crear un primer array vacio con cosas vacias, tenbemos que traer la info guardada en local storage\n  let parsedTodos;\n\n  //Vemos si tiene informacion\n  if(!localStorageTodos){\n\n    //Por defecto una lista de todos\n    localStorage.setItem('TODOS_V1',[]);\n    parsedTodos = [];\n  } \n\n  //Ya tiene algunos todos\n  else{\n    parsedTodos = JSON.parse(localStorageTodos);\n  }\n\n\n  const [todos, setTodos] = React.useState(parsedTodos);\n  //Creamos nuestros estados a traves de nuestro searchValue y esto hace que haya una posuble reutilizacion de los componentes esto nos ayudara al cambio de estado dinamico\n  const [searchValue, setSearchValue] = React.useState('');\n\n  //CUantos todos hemos completado, a traves de nuestro todo viendo la propiedad interesante la forma de validacion con doble signo de admiiracion\n  const completedTodos = todos.filter(todo => !!todo.completed).length;\n  const totalTodos = todos.length; //Total de todos\n\n  //Buscar si no han escrito nada en un arreglo con el input\n  let searchedTodos = [];\n  //Vemos si search es mayor que 1 para ver si no han escrito se muetsrasn igual\n\n  /*Otra forma de realizarlo es un poco mas compacto\n  const todosFiltered = todos.filter(todo => todo.text.toLowerCase().includes(searchValue.toLowerCase()));\n  */\n\n  if(!searchValue.length >= 1){\n    searchedTodos = todos;\n  } \n  //Vamos a filtrar cantidad de todos en la listay convertimos todas las minisuculas en mayusuclas \n  else {\n    //Con esto lo que logramos hacer esque convertimos el input a minusculas de lo que hacemos es llamar a nuestro evento filterdonde buscaremos cada componente rendreizado\n  searchedTodos = todos.filter(todo =>{\n    const todoText = todo.text.toLowerCase();\n    const searchText = searchValue.toLowerCase();\n    //De esta forma comparamos con string cuales hay\n    return todoText.includes(searchText);\n  });\n  }\n\n  //Esto es para marcar la funcion como completado, el id es text que ocuparemos\n  const completeTodos = (text) =>{\n    //Metodo que encuentra el Index\n    const todoIndex = todos.findIndex(todo => todo.text === text);\n\n    //Lista de todos entramos y por cada estado de todo Index cambiamos a true\n\n    // todos[todoIndex] = {\n    //   text: todos[todoIndex].text,\n    //   completed: true,\n    // };\n\n    //De esta forma inyectamos todos los todos esto para hacer los rededenres cambiar los estados con lso 3 puntos inyectamos todos\n    const newTodos = [...todos];\n    //Forma facil de desarrollar los estados clonando todos\n    newTodos[todoIndex].completed = true;\n    //Causamos el redender con nuestros todos para obtener \n    setTodos(newTodos);\n  }\n\n\n  //Esto para eliminar un arreglo\n  const deleteTodos = (text) =>{\n    const todoIndex = todos.findIndex(todo => todo.text === text);\n\n    const newTodos = [...todos];\n    //El m√©todo splice() cambia el contenido de un array eliminando elementos existentes y/o agregando nuevos elementos.\n    //En esta caso solo ponemos 1 para un todo eliminado\n    newTodos.splice(todoIndex, 1);\n    //nuestro render\n    setTodos(newTodos);\n  }\n\n  return (\n\n    //Creando toda la app desing de la pagina con los props de cada cosa\n    <AppUI \n     totalTodos={totalTodos}\n     completedTodos={completedTodos}\n     searchValue={searchValue}\n     setSearchValue={setSearchValue}\n     searchedTodos={searchedTodos}\n     completeTodos={completeTodos}\n     deleteTodos={deleteTodos}\n    />\n\n    // //Soporta un componente solamente\n    // //Esta etiqueta nos funciona para calculos internos solo enviamos una etiqueta por componente envolver para quitar cantidad divs\n    // //Para comentar o poner javascript con las {} claves\n    // <React.Fragment>\n    // {//Para evitar confusiones no se debe dar class si no que se da con class name evitar clases de js\n    // //La magia de JSX es las propiedades que hay\n    // <TodoHeader/>\n    // //Poner nuestros elementos\n    // //Todocounter es el que marcara el numero de todos completados\n    // }\n    // <TodoCounter\n    // total={totalTodos}\n    // completed={completedTodos}\n    // />\n\n    // {//El input de busqueda que escribamos\n    //  //podemos crear a traves de react nuestra app principal los valores de estados de nuestra app\n    // }\n    // <TodoSearch\n    //   searchValue={searchValue}\n    //   setSearchValue={setSearchValue}\n    // />\n    \n      \n    // {//COntenedor de todos con lista\n    // //Tenemos nuestro componente que sera el recursivo reutilizable, utilizando map rendrizando\n    // }\n    // <TodoList>\n      \n    // {searchedTodos.map(todo => (\n    //       //Tomemos en cuenta que hay que tener un identificador de lista asi como un ID en abse de datos\n    //       <TodoItem \n    //       key={todo.text} \n    //       text={todo.text}\n    //       //Enviamos una nueva propiedad que se llame completed\n    //       completed={todo.completed}\n    //       //Enviamos las propiedas a nuestro componente para la actualizacion y re-renderizacion de todos\n    //       onComplete={() =>completeTodos(todo.text)}\n    //       onDelete={() =>deleteTodos(todo.text)}\n    //       />\n    //  ))}\n      \n    // </TodoList>\n\n    // <CreateTodoButton/>\n    // </React.Fragment>\n    );\n\n    \n}\n\n//Encapsulamiento javascript\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}