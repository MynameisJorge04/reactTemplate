{"ast":null,"code":"//pedimos a react que nos haga un paquete invisible\n//LLamamos a nuestro archivo todocounter traer la funcion no el archivo\nimport React from'react';import{TodoProvider}from'../TodoContext';import{AppUI}from'./AppUI';//Ejemplo: tenemos una url \n//const url = \"https://.jpg\" podemos remplazar con el nombre de la variable\n//Esto se traduce a una clase en un div, que solo son llamados a react\n//Podemos obtener parametros de elementos desde nuestro index.js observamos que hay buenos\n//mensajes existentes\n//Lista falsa de todos\n// const defultTodos = [\n//   {text: 'Cortar cebolla', completed: false},\n//   {text: 'Tomar curso intro react', completed: false},\n//   {text: 'Llorar con la lloran', completed: false},\n//   {text: 'LALALALLALALAA', completed: false},\n// ];\nimport{jsx as _jsx}from\"react/jsx-runtime\";function App(){return/*#__PURE__*/ (//Creando toda la app desing de la pagina con los props de cada cosa\n//Llamamos a nuestro Todo Provider\n_jsx(TodoProvider,{children:/*#__PURE__*/_jsx(AppUI,{})})// //Soporta un componente solamente\n// //Esta etiqueta nos funciona para calculos internos solo enviamos una etiqueta por componente envolver para quitar cantidad divs\n// //Para comentar o poner javascript con las {} claves\n// <React.Fragment>\n// {//Para evitar confusiones no se debe dar class si no que se da con class name evitar clases de js\n// //La magia de JSX es las propiedades que hay\n// <TodoHeader/>\n// //Poner nuestros elementos\n// //Todocounter es el que marcara el numero de todos completados\n// }\n// <TodoCounter\n// total={totalTodos}\n// completed={completedTodos}\n// />\n// {//El input de busqueda que escribamos\n//  //podemos crear a traves de react nuestra app principal los valores de estados de nuestra app\n// }\n// <TodoSearch\n//   searchValue={searchValue}\n//   setSearchValue={setSearchValue}\n// />\n// {//COntenedor de todos con lista\n// //Tenemos nuestro componente que sera el recursivo reutilizable, utilizando map rendrizando\n// }\n// <TodoList>\n// {searchedTodos.map(todo => (\n//       //Tomemos en cuenta que hay que tener un identificador de lista asi como un ID en abse de datos\n//       <TodoItem \n//       key={todo.text} \n//       text={todo.text}\n//       //Enviamos una nueva propiedad que se llame completed\n//       completed={todo.completed}\n//       //Enviamos las propiedas a nuestro componente para la actualizacion y re-renderizacion de todos\n//       onComplete={() =>completeTodos(todo.text)}\n//       onDelete={() =>deleteTodos(todo.text)}\n//       />\n//  ))}\n// </TodoList>\n// <CreateTodoButton/>\n// </React.Fragment>\n);}//Encapsulamiento javascript\nexport default App;","map":{"version":3,"names":["React","TodoProvider","AppUI","App"],"sources":["/home/jorgebg/personalProjects/cursoReact/cursoReactIntroduccion/todo-machine/src/App/index.js"],"sourcesContent":["//pedimos a react que nos haga un paquete invisible\n//LLamamos a nuestro archivo todocounter traer la funcion no el archivo\nimport React from 'react';\nimport { TodoProvider } from '../TodoContext';\nimport { AppUI } from './AppUI';\n\n\n//Ejemplo: tenemos una url \n//const url = \"https://.jpg\" podemos remplazar con el nombre de la variable\n\n//Esto se traduce a una clase en un div, que solo son llamados a react\n//Podemos obtener parametros de elementos desde nuestro index.js observamos que hay buenos\n//mensajes existentes\n\n//Lista falsa de todos\n\n// const defultTodos = [\n//   {text: 'Cortar cebolla', completed: false},\n//   {text: 'Tomar curso intro react', completed: false},\n//   {text: 'Llorar con la lloran', completed: false},\n//   {text: 'LALALALLALALAA', completed: false},\n// ];\n\n\n\nfunction App() {\n  \n\n  return (\n\n    //Creando toda la app desing de la pagina con los props de cada cosa\n\n    //Llamamos a nuestro Todo Provider\n    <TodoProvider>\n      {/* Ya podemos tener cualquier componente dentro de appui pueden comunicarse a traves de consumer */}\n      <AppUI/>\n    </TodoProvider>\n\n    // //Soporta un componente solamente\n    // //Esta etiqueta nos funciona para calculos internos solo enviamos una etiqueta por componente envolver para quitar cantidad divs\n    // //Para comentar o poner javascript con las {} claves\n    // <React.Fragment>\n    // {//Para evitar confusiones no se debe dar class si no que se da con class name evitar clases de js\n    // //La magia de JSX es las propiedades que hay\n    // <TodoHeader/>\n    // //Poner nuestros elementos\n    // //Todocounter es el que marcara el numero de todos completados\n    // }\n    // <TodoCounter\n    // total={totalTodos}\n    // completed={completedTodos}\n    // />\n\n    // {//El input de busqueda que escribamos\n    //  //podemos crear a traves de react nuestra app principal los valores de estados de nuestra app\n    // }\n    // <TodoSearch\n    //   searchValue={searchValue}\n    //   setSearchValue={setSearchValue}\n    // />\n    \n      \n    // {//COntenedor de todos con lista\n    // //Tenemos nuestro componente que sera el recursivo reutilizable, utilizando map rendrizando\n    // }\n    // <TodoList>\n      \n    // {searchedTodos.map(todo => (\n    //       //Tomemos en cuenta que hay que tener un identificador de lista asi como un ID en abse de datos\n    //       <TodoItem \n    //       key={todo.text} \n    //       text={todo.text}\n    //       //Enviamos una nueva propiedad que se llame completed\n    //       completed={todo.completed}\n    //       //Enviamos las propiedas a nuestro componente para la actualizacion y re-renderizacion de todos\n    //       onComplete={() =>completeTodos(todo.text)}\n    //       onDelete={() =>deleteTodos(todo.text)}\n    //       />\n    //  ))}\n      \n    // </TodoList>\n\n    // <CreateTodoButton/>\n    // </React.Fragment>\n    );\n\n    \n}\n\n//Encapsulamiento javascript\nexport default App;\n"],"mappings":"AAAA;AACA;AACA,MAAOA,MAAK,KAAM,OAAO,CACzB,OAASC,YAAY,KAAQ,gBAAgB,CAC7C,OAASC,KAAK,KAAQ,SAAS,CAG/B;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA,2CAIA,QAASC,IAAG,EAAG,CAGb,oBAEE;AAEA;AACA,KAAC,YAAY,wBAEX,KAAC,KAAK,IAAE,EAGV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA,EAIJ,CAEA;AACA,cAAeA,IAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}