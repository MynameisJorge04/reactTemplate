{"ast":null,"code":"var _s = $RefreshSig$();\nimport React from 'react';\nfunction useLocalStorage(itemName, initialValue) {\n  _s();\n  const [error, setError] = React.useState(false);\n  const [loading, setLoading] = React.useState(true);\n  const [item, setItem] = React.useState(initialValue);\n  React.useEffect(() => {\n    setTimeout(() => {\n      try {\n        const localStorageItem = localStorage.getItem(itemName);\n        let parsedItem;\n        if (!localStorageItem) {\n          localStorage.setItem(itemName, JSON.stringify(initialValue));\n          parsedItem = initialValue;\n        } else {\n          parsedItem = JSON.parse(localStorageItem);\n        }\n        setItem(parsedItem);\n        setLoading(false);\n      } catch (error) {\n        setError(error);\n      }\n    }, 1000);\n  });\n  const saveItem = newItem => {\n    try {\n      const stringifiedItem = JSON.stringify(newItem);\n      localStorage.setItem(itemName, stringifiedItem);\n      setItem(newItem);\n    } catch (error) {\n      setError(error);\n    }\n  };\n  return {\n    item,\n    saveItem,\n    loading,\n    error\n  };\n}\n_s(useLocalStorage, \"sd/jOzXoKWa10AnxNJGXHNbuvYQ=\");\nexport { useLocalStorage };\n\n// import React from 'react';\n\n// //Podemos empezar a hacer hoooks como queramos\n\n// function useLocalStorage(itemName, initialValue) {\n//     //Cuando tengamos algo de infromaicon dentro de nuestro estado porque ya acabo de cargar entonces pasamos a la aplicacion\n//     const [loading, setLoading] = React.useState(true);\n\n//     //Cuando tengamos algo de infromaicon dentro de nuestro estado porque ya acabo de cargar entonces pasamos a la aplicacion\n//     const [error, setError] = React.useState(false);\n\n//     //Ya no traeremos por defecto la informacacion storage si nho lo definido\n//     const [item, setItem] = React.useState(initialValue);\n\n//     //Lo que haremos es simular que tardara un rato en llegar\n//     React.useEffect(() => {\n//       //Cantidad de tiempo hasta ejecutar la funcion\n//       setTimeout(() => {\n//         //Vamos a hacer un try catch, que consiste en una condicion de error, y ejecuta cierta parte de codigo\n\n//         try{\n//           //Casi siempre las APIS tienen ciertas versiones\n//         const localStorageItem = localStorage.getItem(itemName);\n\n//         //Crear un primer array vacio con cosas vacias, tenbemos que traer la info guardada en local storage\n//         let parsedItem = initialValue;\n\n//         //Vemos si tiene informacion\n//         if (!localStorageItem) {\n//           //Por defecto una lista de todos necesitamos enmviar un string\n//           localStorage.setItem(itemName, JSON.stringify(initialValue));\n//           parsedItem = [];\n//         }\n\n//         //Ya tiene algunos todos\n//         else {\n//           parsedItem = JSON.parse(localStorageItem);\n//         }\n\n//         //Nuestro estado es el inical al tener un array vacio, lo que hace es dar el nuevo valor en localstorage\n//         setTimeout(parsedItem);\n//         setLoading(false);\n//         } catch(error){\n//           //Tomamos en cuenta que los errores son falsos\n//           setError(error);\n//         }\n\n//       }, 1000);\n//     });\n\n//     //Para la persistencia cada cambio debemos llamar nuestro local storage para persistencia\n//     const savedItem = (newItem) => {\n//       //Envolvemos a nuestros items por si hay algun error tambien\n//       try{\n//         //HAY QUE PERSISTIR la informacion\n//       const stringifiedItem = JSON.stringify(newItem);\n//       //GUardamos nuestra cadena\n//       localStorage.setItem(itemName, stringifiedItem);\n//       //Debemos evitar la actualizacion de la pagina\n//       setItem(newItem);\n//       } catch(error){\n//         setError(error);\n//       }\n//     };\n\n//     //Necesitamos retornar localStorage, es importante tomar en cuenta que si hay mas estados que dos en un hook devolvemos un objeto\n//     return {\n//       item, \n//       savedItem, \n//       loading,\n//       error,\n//     };\n//   }\n\n//   export { useLocalStorage };","map":{"version":3,"names":["React","useLocalStorage","itemName","initialValue","error","setError","useState","loading","setLoading","item","setItem","useEffect","setTimeout","localStorageItem","localStorage","getItem","parsedItem","JSON","stringify","parse","saveItem","newItem","stringifiedItem"],"sources":["/home/jorgebg/personalProjects/cursoReact/cursoReactIntroduccion/todo-machine/src/TodoContext/useLocalStorage.js"],"sourcesContent":["import React from 'react';\n\nfunction useLocalStorage(itemName, initialValue) {\n  const [error, setError] = React.useState(false);\n  const [loading, setLoading] = React.useState(true);\n  const [item, setItem] = React.useState(initialValue);\n  \n  React.useEffect(() => {\n    setTimeout(() => {\n      try {\n        const localStorageItem = localStorage.getItem(itemName);\n        let parsedItem;\n        \n        if (!localStorageItem) {\n          localStorage.setItem(itemName, JSON.stringify(initialValue));\n          parsedItem = initialValue;\n        } else {\n          parsedItem = JSON.parse(localStorageItem);\n        }\n\n        setItem(parsedItem);\n        setLoading(false);\n      } catch(error) {\n        setError(error);\n      }\n    }, 1000);\n  });\n  \n  const saveItem = (newItem) => {\n    try {\n      const stringifiedItem = JSON.stringify(newItem);\n      localStorage.setItem(itemName, stringifiedItem);\n      setItem(newItem);\n    } catch(error) {\n      setError(error);\n    }\n  };\n\n  return {\n    item,\n    saveItem,\n    loading,\n    error,\n  };\n}\n\nexport { useLocalStorage };\n\n\n\n\n\n\n\n\n\n\n\n\n// import React from 'react';\n\n// //Podemos empezar a hacer hoooks como queramos\n\n// function useLocalStorage(itemName, initialValue) {\n//     //Cuando tengamos algo de infromaicon dentro de nuestro estado porque ya acabo de cargar entonces pasamos a la aplicacion\n//     const [loading, setLoading] = React.useState(true);\n  \n//     //Cuando tengamos algo de infromaicon dentro de nuestro estado porque ya acabo de cargar entonces pasamos a la aplicacion\n//     const [error, setError] = React.useState(false);\n  \n//     //Ya no traeremos por defecto la informacacion storage si nho lo definido\n//     const [item, setItem] = React.useState(initialValue);\n  \n//     //Lo que haremos es simular que tardara un rato en llegar\n//     React.useEffect(() => {\n//       //Cantidad de tiempo hasta ejecutar la funcion\n//       setTimeout(() => {\n//         //Vamos a hacer un try catch, que consiste en una condicion de error, y ejecuta cierta parte de codigo\n  \n//         try{\n//           //Casi siempre las APIS tienen ciertas versiones\n//         const localStorageItem = localStorage.getItem(itemName);\n  \n//         //Crear un primer array vacio con cosas vacias, tenbemos que traer la info guardada en local storage\n//         let parsedItem = initialValue;\n  \n//         //Vemos si tiene informacion\n//         if (!localStorageItem) {\n//           //Por defecto una lista de todos necesitamos enmviar un string\n//           localStorage.setItem(itemName, JSON.stringify(initialValue));\n//           parsedItem = [];\n//         }\n  \n//         //Ya tiene algunos todos\n//         else {\n//           parsedItem = JSON.parse(localStorageItem);\n//         }\n  \n//         //Nuestro estado es el inical al tener un array vacio, lo que hace es dar el nuevo valor en localstorage\n//         setTimeout(parsedItem);\n//         setLoading(false);\n//         } catch(error){\n//           //Tomamos en cuenta que los errores son falsos\n//           setError(error);\n//         }\n  \n//       }, 1000);\n//     });\n  \n  \n  \n//     //Para la persistencia cada cambio debemos llamar nuestro local storage para persistencia\n//     const savedItem = (newItem) => {\n//       //Envolvemos a nuestros items por si hay algun error tambien\n//       try{\n//         //HAY QUE PERSISTIR la informacion\n//       const stringifiedItem = JSON.stringify(newItem);\n//       //GUardamos nuestra cadena\n//       localStorage.setItem(itemName, stringifiedItem);\n//       //Debemos evitar la actualizacion de la pagina\n//       setItem(newItem);\n//       } catch(error){\n//         setError(error);\n//       }\n//     };\n  \n//     //Necesitamos retornar localStorage, es importante tomar en cuenta que si hay mas estados que dos en un hook devolvemos un objeto\n//     return {\n//       item, \n//       savedItem, \n//       loading,\n//       error,\n//     };\n//   }\n\n//   export { useLocalStorage };"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,eAAe,CAACC,QAAQ,EAAEC,YAAY,EAAE;EAAA;EAC/C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,KAAK,CAACM,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,KAAK,CAACM,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACG,IAAI,EAAEC,OAAO,CAAC,GAAGV,KAAK,CAACM,QAAQ,CAACH,YAAY,CAAC;EAEpDH,KAAK,CAACW,SAAS,CAAC,MAAM;IACpBC,UAAU,CAAC,MAAM;MACf,IAAI;QACF,MAAMC,gBAAgB,GAAGC,YAAY,CAACC,OAAO,CAACb,QAAQ,CAAC;QACvD,IAAIc,UAAU;QAEd,IAAI,CAACH,gBAAgB,EAAE;UACrBC,YAAY,CAACJ,OAAO,CAACR,QAAQ,EAAEe,IAAI,CAACC,SAAS,CAACf,YAAY,CAAC,CAAC;UAC5Da,UAAU,GAAGb,YAAY;QAC3B,CAAC,MAAM;UACLa,UAAU,GAAGC,IAAI,CAACE,KAAK,CAACN,gBAAgB,CAAC;QAC3C;QAEAH,OAAO,CAACM,UAAU,CAAC;QACnBR,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,CAAC,OAAMJ,KAAK,EAAE;QACbC,QAAQ,CAACD,KAAK,CAAC;MACjB;IACF,CAAC,EAAE,IAAI,CAAC;EACV,CAAC,CAAC;EAEF,MAAMgB,QAAQ,GAAIC,OAAO,IAAK;IAC5B,IAAI;MACF,MAAMC,eAAe,GAAGL,IAAI,CAACC,SAAS,CAACG,OAAO,CAAC;MAC/CP,YAAY,CAACJ,OAAO,CAACR,QAAQ,EAAEoB,eAAe,CAAC;MAC/CZ,OAAO,CAACW,OAAO,CAAC;IAClB,CAAC,CAAC,OAAMjB,KAAK,EAAE;MACbC,QAAQ,CAACD,KAAK,CAAC;IACjB;EACF,CAAC;EAED,OAAO;IACLK,IAAI;IACJW,QAAQ;IACRb,OAAO;IACPH;EACF,CAAC;AACH;AAAC,GA1CQH,eAAe;AA4CxB,SAASA,eAAe;;AAaxB;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}